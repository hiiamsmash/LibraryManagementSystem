Great! Let’s now create the Edit Customer page in Angular 18 that sends a PUT request to your Spring Boot backend.

⸻

✅ Backend Endpoint (as you gave):

PUT http://localhost:8080/api/bank/customers/{customerId}

With form-data (or application/x-www-form-urlencoded):
	•	name
	•	email
	•	phone (optional)
	•	address (optional)
	•	dob (optional, yyyy-MM-dd)

⸻

✅ Step 1: Add Route

In app.routes.ts:

{
  path: 'dashboard',
  component: DashboardComponent,
  children: [
    {
      path: 'create-customer',
      loadComponent: () => import('./create-customer/create-customer.component').then(m => m.CreateCustomerComponent)
    },
    {
      path: 'edit-customer',
      loadComponent: () => import('./edit-customer/edit-customer.component').then(m => m.EditCustomerComponent)
    }
  ]
}


⸻

✅ Step 2: Create Folder & Component

ng generate component edit-customer --standalone --flat --module app


⸻

✅ Step 3: edit-customer.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-edit-customer',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './edit-customer.component.html',
})
export class EditCustomerComponent {
  customerId = '';
  name = '';
  email = '';
  phone = '';
  address = '';
  dob = '';

  constructor(private http: HttpClient) {}

  onUpdateCustomer() {
    const formData = new URLSearchParams();
    if (this.name) formData.set('name', this.name);
    if (this.email) formData.set('email', this.email);
    if (this.phone) formData.set('phone', this.phone);
    if (this.address) formData.set('address', this.address);
    if (this.dob) formData.set('dob', this.dob);

    this.http.put(
  `http://localhost:8080/api/bank/customers/${this.customerId}`,
  formData.toString(),
  {
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    responseType: 'text' // <-- Tell Angular to treat response as plain text
  }
).subscribe({
  next: (res) => {
    alert(res); // This will now show "Customer updated successfully"
  },
  error: (err) => {
    console.error(err);
    alert('Update failed!');
  }
});
  }
}


⸻

✅ Step 4: edit-customer.component.html

<h2>Edit Customer</h2>
<form (ngSubmit)="onUpdateCustomer()">
  <label>Customer ID:
    <input type="text" [(ngModel)]="customerId" name="customerId" required>
  </label><br>

  <label>Name:
    <input type="text" [(ngModel)]="name" name="name">
  </label><br>

  <label>Email:
    <input type="email" [(ngModel)]="email" name="email">
  </label><br>

  <label>Phone:
    <input type="text" [(ngModel)]="phone" name="phone">
  </label><br>

  <label>Address:
    <input type="text" [(ngModel)]="address" name="address">
  </label><br>

  <label>Date of Birth:
    <input type="date" [(ngModel)]="dob" name="dob">
  </label><br>

  <button type="submit">Update Customer</button>
</form>


⸻

✅ Step 5: Add link in dashboard.component.html

<a routerLink="edit-customer">Edit Customer</a>


⸻

Let me know when you want to move on to Create Account, Withdraw, Deposit, or Transactions!



////////////////////

Here’s how you can implement the Create Account functionality in your Angular 18 frontend that works with your Spring Boot backend.

⸻

🔧 1. Generate CreateAccountComponent

ng generate component create-account


⸻

📄 2. create-account.component.html

<h2>Create Account</h2>

<form (ngSubmit)="onCreateAccount()">
  <label for="customerId">Customer ID:</label>
  <input type="number" id="customerId" [(ngModel)]="customerId" name="customerId" required />

  <label for="accountTypeId">Account Type ID:</label>
  <input type="number" id="accountTypeId" [(ngModel)]="accountTypeId" name="accountTypeId" required />

  <button type="submit">Create Account</button>
</form>


⸻

📄 3. create-account.component.ts

import { Component } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';

@Component({
  selector: 'app-create-account',
  templateUrl: './create-account.component.html',
  standalone: true,
  imports: []
})
export class CreateAccountComponent {
  customerId!: number;
  accountTypeId!: number;

  constructor(private http: HttpClient) {}

  onCreateAccount() {
    const formData = new HttpParams()
      .set('customerId', this.customerId)
      .set('accountTypeId', this.accountTypeId);

    this.http.post('http://localhost:8080/api/bank/accounts', formData.toString(), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      responseType: 'text'
    }).subscribe({
      next: (res) => {
        alert(res); // success message from backend
      },
      error: (err) => {
        console.error(err);
        alert('Account creation failed!');
      }
    });
  }
}


⸻

🛣️ 4. Add route in app.routes.ts or your dashboard.routes.ts

{
  path: 'dashboard/create-account',
  component: CreateAccountComponent
}

Also add a link in dashboard.component.html:

<a routerLink="/dashboard/create-account">Create Account</a>


⸻

✅ Now when you visit http://localhost:4200/dashboard/create-account, you’ll see the account creation form. On submit, it will call your Spring Boot backend and show the backend response.

Let me know when you’re ready for the next feature — e.g., Withdraw, Deposit, Balance Check, or Transaction History.




!////://////:::::::://///


Here’s how you can implement the Deposit Money feature in Angular that works with your provided Spring Boot backend.

⸻

✅ 1. Create DepositMoneyComponent

📄 src/app/deposit-money/deposit-money.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient, HttpClientModule } from '@angular/common/http';

@Component({
  selector: 'app-deposit-money',
  standalone: true,
  imports: [CommonModule, FormsModule, HttpClientModule],
  templateUrl: './deposit-money.component.html',
  styleUrls: ['./deposit-money.component.css']
})
export class DepositMoneyComponent {
  accountId!: number;
  amount!: number;

  constructor(private http: HttpClient) {}

  onDeposit() {
    const formData = new FormData();
    formData.append('amount', this.amount.toString());

    this.http.post(
      `http://localhost:8080/api/bank/accounts/${this.accountId}/deposit`,
      formData,
      { responseType: 'text' }
    ).subscribe({
      next: (res) => {
        alert(res);
      },
      error: (err) => {
        alert('Deposit failed!');
        console.error(err);
      }
    });
  }
}


⸻

✅ 2. Deposit Money HTML Template

📄 src/app/deposit-money/deposit-money.component.html

<h2>Deposit Money</h2>

<form (ngSubmit)="onDeposit()">
  <label for="accountId">Account ID:</label>
  <input type="number" [(ngModel)]="accountId" name="accountId" required>

  <label for="amount">Amount:</label>
  <input type="number" [(ngModel)]="amount" name="amount" required>

  <button type="submit">Deposit</button>
</form>


⸻

✅ 3. Update app.routes.ts

Make sure the route is defined:

📄 src/app/app.routes.ts

import { DepositMoneyComponent } from './deposit-money/deposit-money.component';

export const routes: Routes = [
  {
    path: 'dashboard',
    component: DashboardComponent,
    children: [
      { path: 'deposit-money', component: DepositMoneyComponent },
      // other routes
    ]
  }
];


⸻

✅ 4. Add Link in Dashboard

📄 src/app/dashboard/dashboard.component.html

<nav>
  <!-- other links -->
  <a routerLink="deposit-money">Deposit Money</a>
</nav>

<router-outlet></router-outlet>


⸻

Once this is done, run ng serve, navigate to the dashboard, and click on “Deposit Money” to access the form. It will hit your Spring Boot endpoint and display the response.

Let me know when you’re ready for Withdraw Money next.

/////////////////:::::::////////

Here’s the complete Withdraw Money feature for your Angular app, matching your Spring Boot endpoint:

⸻

✅ 1. WithdrawMoneyComponent

📄 src/app/withdraw-money/withdraw-money.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient, HttpClientModule } from '@angular/common/http';

@Component({
  selector: 'app-withdraw-money',
  standalone: true,
  imports: [CommonModule, FormsModule, HttpClientModule],
  templateUrl: './withdraw-money.component.html',
  styleUrls: ['./withdraw-money.component.css']
})
export class WithdrawMoneyComponent {
  accountNumber!: number;
  amount!: number;

  constructor(private http: HttpClient) {}

  onWithdraw() {
    const formData = new FormData();
    formData.append('amount', this.amount.toString());

    this.http.post(
      `http://localhost:8080/api/bank/accounts/${this.accountNumber}/withdraw`,
      formData,
      { responseType: 'text' }
    ).subscribe({
      next: (res) => {
        alert(res);
      },
      error: (err) => {
        alert('Withdrawal failed!');
        console.error(err);
      }
    });
  }
}


⸻

✅ 2. WithdrawMoneyComponent HTML

📄 src/app/withdraw-money/withdraw-money.component.html

<h2>Withdraw Money</h2>

<form (ngSubmit)="onWithdraw()">
  <label for="accountNumber">Account Number:</label>
  <input type="number" [(ngModel)]="accountNumber" name="accountNumber" required>

  <label for="amount">Amount:</label>
  <input type="number" [(ngModel)]="amount" name="amount" required>

  <button type="submit">Withdraw</button>
</form>


⸻

✅ 3. Update Routes

📄 src/app/app.routes.ts

Make sure you import and add the route:

import { WithdrawMoneyComponent } from './withdraw-money/withdraw-money.component';

export const routes: Routes = [
  {
    path: 'dashboard',
    component: DashboardComponent,
    children: [
      { path: 'withdraw-money', component: WithdrawMoneyComponent },
      // other routes
    ]
  }
];


⸻

✅ 4. Link in Dashboard

📄 src/app/dashboard/dashboard.component.html

<nav>
  <!-- other links -->
  <a routerLink="withdraw-money">Withdraw Money</a>
</nav>

<router-outlet></router-outlet>


⸻

Now you can withdraw money by visiting http://localhost:4200/dashboard/withdraw-money.
Let me know when you’re ready for Check Balance or Transaction History features!




//////////////////:::::////////




Here’s the View Balance feature in Angular based on your Spring Boot backend.

⸻

✅ 1. ViewBalanceComponent

📄 src/app/view-balance/view-balance.component.ts

import { Component } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-view-balance',
  standalone: true,
  imports: [CommonModule, FormsModule, HttpClientModule],
  templateUrl: './view-balance.component.html',
  styleUrls: ['./view-balance.component.css']
})
export class ViewBalanceComponent {
  accountId!: number;
  balanceMessage: string = '';

  constructor(private http: HttpClient) {}

  onCheckBalance() {
    this.http.get(`http://localhost:8080/api/bank/accounts/${this.accountId}/balance`, { responseType: 'text' })
      .subscribe({
        next: (res) => {
          this.balanceMessage = res;
        },
        error: (err) => {
          this.balanceMessage = 'Balance check failed!';
          console.error(err);
        }
      });
  }
}


⸻

✅ 2. ViewBalanceComponent HTML

📄 src/app/view-balance/view-balance.component.html

<h2>View Balance</h2>

<form (ngSubmit)="onCheckBalance()">
  <label for="accountId">Account ID:</label>
  <input type="number" [(ngModel)]="accountId" name="accountId" required>

  <button type="submit">Check Balance</button>
</form>

<p *ngIf="balanceMessage">{{ balanceMessage }}</p>


⸻

✅ 3. Update Routes

📄 src/app/app.routes.ts

Add this to the dashboard’s child routes:

import { ViewBalanceComponent } from './view-balance/view-balance.component';

{
  path: 'dashboard',
  component: DashboardComponent,
  children: [
    { path: 'view-balance', component: ViewBalanceComponent },
    // other routes
  ]
}


⸻

✅ 4. Link in Dashboard

📄 src/app/dashboard/dashboard.component.html

<nav>
  <!-- other links -->
  <a routerLink="view-balance">Check Balance</a>
</nav>

<router-outlet></router-outlet>


⸻

Now when you go to http://localhost:4200/dashboard/view-balance, you can enter an accountId and see the balance.

Let me know when you’re ready for View Transactions or want to polish the UI.
