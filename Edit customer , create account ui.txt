Great! Let‚Äôs now create the Edit Customer page in Angular 18 that sends a PUT request to your Spring Boot backend.

‚∏ª

‚úÖ Backend Endpoint (as you gave):

PUT http://localhost:8080/api/bank/customers/{customerId}

With form-data (or application/x-www-form-urlencoded):
	‚Ä¢	name
	‚Ä¢	email
	‚Ä¢	phone (optional)
	‚Ä¢	address (optional)
	‚Ä¢	dob (optional, yyyy-MM-dd)

‚∏ª

‚úÖ Step 1: Add Route

In app.routes.ts:

{
  path: 'dashboard',
  component: DashboardComponent,
  children: [
    {
      path: 'create-customer',
      loadComponent: () => import('./create-customer/create-customer.component').then(m => m.CreateCustomerComponent)
    },
    {
      path: 'edit-customer',
      loadComponent: () => import('./edit-customer/edit-customer.component').then(m => m.EditCustomerComponent)
    }
  ]
}


‚∏ª

‚úÖ Step 2: Create Folder & Component

ng generate component edit-customer --standalone --flat --module app


‚∏ª

‚úÖ Step 3: edit-customer.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-edit-customer',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './edit-customer.component.html',
})
export class EditCustomerComponent {
  customerId = '';
  name = '';
  email = '';
  phone = '';
  address = '';
  dob = '';

  constructor(private http: HttpClient) {}

  onUpdateCustomer() {
    const formData = new URLSearchParams();
    if (this.name) formData.set('name', this.name);
    if (this.email) formData.set('email', this.email);
    if (this.phone) formData.set('phone', this.phone);
    if (this.address) formData.set('address', this.address);
    if (this.dob) formData.set('dob', this.dob);

    this.http.put(
  `http://localhost:8080/api/bank/customers/${this.customerId}`,
  formData.toString(),
  {
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    responseType: 'text' // <-- Tell Angular to treat response as plain text
  }
).subscribe({
  next: (res) => {
    alert(res); // This will now show "Customer updated successfully"
  },
  error: (err) => {
    console.error(err);
    alert('Update failed!');
  }
});
  }
}


‚∏ª

‚úÖ Step 4: edit-customer.component.html

<h2>Edit Customer</h2>
<form (ngSubmit)="onUpdateCustomer()">
  <label>Customer ID:
    <input type="text" [(ngModel)]="customerId" name="customerId" required>
  </label><br>

  <label>Name:
    <input type="text" [(ngModel)]="name" name="name">
  </label><br>

  <label>Email:
    <input type="email" [(ngModel)]="email" name="email">
  </label><br>

  <label>Phone:
    <input type="text" [(ngModel)]="phone" name="phone">
  </label><br>

  <label>Address:
    <input type="text" [(ngModel)]="address" name="address">
  </label><br>

  <label>Date of Birth:
    <input type="date" [(ngModel)]="dob" name="dob">
  </label><br>

  <button type="submit">Update Customer</button>
</form>


‚∏ª

‚úÖ Step 5: Add link in dashboard.component.html

<a routerLink="edit-customer">Edit Customer</a>


‚∏ª

Let me know when you want to move on to Create Account, Withdraw, Deposit, or Transactions!



////////////////////

Here‚Äôs how you can implement the Create Account functionality in your Angular 18 frontend that works with your Spring Boot backend.

‚∏ª

üîß 1. Generate CreateAccountComponent

ng generate component create-account


‚∏ª

üìÑ 2. create-account.component.html

<h2>Create Account</h2>

<form (ngSubmit)="onCreateAccount()">
  <label for="customerId">Customer ID:</label>
  <input type="number" id="customerId" [(ngModel)]="customerId" name="customerId" required />

  <label for="accountTypeId">Account Type ID:</label>
  <input type="number" id="accountTypeId" [(ngModel)]="accountTypeId" name="accountTypeId" required />

  <button type="submit">Create Account</button>
</form>


‚∏ª

üìÑ 3. create-account.component.ts

import { Component } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';

@Component({
  selector: 'app-create-account',
  templateUrl: './create-account.component.html',
  standalone: true,
  imports: []
})
export class CreateAccountComponent {
  customerId!: number;
  accountTypeId!: number;

  constructor(private http: HttpClient) {}

  onCreateAccount() {
    const formData = new HttpParams()
      .set('customerId', this.customerId)
      .set('accountTypeId', this.accountTypeId);

    this.http.post('http://localhost:8080/api/bank/accounts', formData.toString(), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      responseType: 'text'
    }).subscribe({
      next: (res) => {
        alert(res); // success message from backend
      },
      error: (err) => {
        console.error(err);
        alert('Account creation failed!');
      }
    });
  }
}


‚∏ª

üõ£Ô∏è 4. Add route in app.routes.ts or your dashboard.routes.ts

{
  path: 'dashboard/create-account',
  component: CreateAccountComponent
}

Also add a link in dashboard.component.html:

<a routerLink="/dashboard/create-account">Create Account</a>


‚∏ª

‚úÖ Now when you visit http://localhost:4200/dashboard/create-account, you‚Äôll see the account creation form. On submit, it will call your Spring Boot backend and show the backend response.

Let me know when you‚Äôre ready for the next feature ‚Äî e.g., Withdraw, Deposit, Balance Check, or Transaction History.
