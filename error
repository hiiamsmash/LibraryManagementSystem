CREATE SEQUENCE customer_id_seq
    START WITH 1
    INCREMENT BY 1
    NOCACHE;


CREATE OR REPLACE TRIGGER customer_id_trigger
    BEFORE INSERT ON INTERN_CUSTOMER
    FOR EACH ROW
BEGIN
    :NEW.CUSTOMER_ID := customer_id_seq.NEXTVAL;
END;




public Customer createCustomer(Customer customer) {
    // Fetch the AccountType based on accountTypeId
    AccountType accountType = accountTypeRepo.findById(customer.getAccountType().getId())
            .orElseThrow(() -> new CustomException("Invalid account type"));

    customer.setAccountType(accountType);  // Set the accountType for the customer
    return customerRepo.save(customer);
}






















@PostMapping("/customers")
public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {
    // Validate required fields or add custom logic
    if (customer.getName() == null || customer.getEmail() == null) {
        throw new CustomException("Name and Email are required fields.");
    }

    Customer createdCustomer = bankService.createCustomer(customer);
    return ResponseEntity.status(HttpStatus.CREATED).body(createdCustomer);
}





{
  "login": {
    "loginId": 1,
    "username": "new_user",
    "password": "password123"
  },
  "name": "John Doe",
  "email": "john.doe@example.com",
  "phone": "9876543210",
  "address": "123 Street, City",
  "dob": "1990-01-01",
  "accountTypeId": 1
}






package com.intern.bank.model;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "INTERN_CUSTOMER")
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)  // Automatically generate the ID
    @Column(name = "CUSTOMER_ID")
    private Long id;

    @OneToOne
    @JoinColumn(name = "LOGIN_ID")
    private UserLogin login;

    @ManyToOne
    @JoinColumn(name = "ACCOUNT_TYPE_ID")
    private AccountType accountType;

    @Column(name = "NAME")
    private String name;

    @Column(name = "EMAIL")
    private String email;

    @Column(name = "PHONE")
    private String phone;

    @Column(name = "ADDRESS")
    private String address;

    @Column(name = "DOB")
    private LocalDate dob;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public UserLogin getLogin() { return login; }
    public void setLogin(UserLogin login) { this.login = login; }

    public AccountType getAccountType() { return accountType; }
    public void setAccountType(AccountType accountType) { this.accountType = accountType; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public LocalDate getDob() { return dob; }
    public void setDob(LocalDate dob) { this.dob = dob; }
}
