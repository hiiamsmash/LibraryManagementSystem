Perfect — you want distinct messages in the Postman response:
	•	"Account not found" if the account doesn’t exist.
	•	"Insufficient balance" if the balance is too low.

⸻

✅ Best Practice: Use Custom Exceptions for Clean Code

But to keep it simple within your current structure, we’ll just return clear messages from the controller based on service checks.

⸻

✅ Final Working Code (Exactly as You Need)

🔧 Controller Method:

@PostMapping("/accounts/{accountNumber}/withdraw")
public ResponseEntity<String> withdraw(
        @PathVariable Long accountNumber,
        @RequestParam BigDecimal amount) {
    try {
        String result = bankService.withdraw(accountNumber, amount);

        return ResponseEntity.ok(result);  // Withdrawal successful
    } catch (IllegalArgumentException e) {
        return ResponseEntity
                .status(HttpStatus.BAD_REQUEST)
                .body(e.getMessage());  // Account not found or Insufficient balance
    } catch (Exception e) {
        return ResponseEntity
                .status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body("Withdrawal failed due to server error: " + e.getMessage());
    }
}


⸻

🔧 Service Method:

Change the return type to String (since now you return success message from service):

@Transactional
public String withdraw(Long accountNumber, BigDecimal amount) {
    Account account = accountRepository.findById(accountNumber).orElse(null);

    if (account == null) {
        throw new IllegalArgumentException("Account not found.");
    }

    if (account.getBalance().compareTo(amount) < 0) {
        throw new IllegalArgumentException("Insufficient balance.");
    }

    account.setBalance(account.getBalance().subtract(amount));
    accountRepository.save(account);

    BankTransaction transaction = new BankTransaction();
    transaction.setAccount(account);
    transaction.setTransactionType("WITHDRAW");
    transaction.setAmount(amount);
    transaction.setTransactionDate(new Date());
    transaction.setReferenceNo(generateReferenceNo("WITH"));

    transactionRepository.save(transaction);

    return String.format("Withdrawal successful. New balance: %.2f", account.getBalance());
}


⸻

✅ Now in Postman you will get:

❌ If account doesn’t exist:

400 Bad Request
Account not found.

❌ If balance is insufficient:

400 Bad Request
Insufficient balance.

✅ If success:

200 OK
Withdrawal successful. New balance: 5000.00


⸻

Let me know if you want to return a JSON object instead of plain text!







1. User Registration & Login
java
// User Registration
@PostMapping("/register")
public ResponseEntity<String> registerUser(
        @RequestParam String username,
        @RequestParam String password) {
    try {
        UserLogin user = bankService.registerUser(username, password);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body("Registration successful for username: " + username);
    } catch (Exception e) {
        return ResponseEntity.badRequest()
                .body("Registration failed: " + e.getMessage());
    }
}

// User Login
@PostMapping("/login")
public ResponseEntity<String> loginUser(
        @RequestParam String username,
        @RequestParam String password) {
    UserLogin user = bankService.loginUser(username, password);
    if (user != null) {
        return ResponseEntity.ok("Login successful for username: " + username);
    } else {
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body("Login failed: Invalid credentials");
    }
}
2. Customer Operations
java
// Create Customer
@PostMapping("/customers")
public ResponseEntity<String> createCustomer(
        @RequestParam Long loginId,
        @RequestParam String name,
        @RequestParam String email,
        @RequestParam(required = false) String phone,
        @RequestParam(required = false) String address,
        @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") Date dob) {
    try {
        Customer customer = bankService.createCustomer(loginId, name, email, phone, address, dob);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body("Customer created successfully with ID: " + customer.getCustomerId());
    } catch (Exception e) {
        return ResponseEntity.badRequest()
                .body("Customer creation failed: " + e.getMessage());
    }
}

// Update Customer
@PutMapping("/customers/{customerId}")
public ResponseEntity<String> updateCustomer(
        @PathVariable Long customerId,
        @RequestParam(required = false) String name,
        @RequestParam(required = false) String email,
        @RequestParam(required = false) String phone,
        @RequestParam(required = false) String address,
        @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") Date dob) {
    try {
        Customer updated = bankService.updateCustomer(customerId, name, email, phone, address, dob);
        return ResponseEntity.ok("Customer updated successfully");
    } catch (RuntimeException e) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body("Update failed: " + e.getMessage());
    }
}
3. Account Operations
java
// Create Account
@PostMapping("/accounts")
public ResponseEntity<String> createAccount(
        @RequestParam Long customerId,
        @RequestParam Long accountTypeId) {
    try {
        Account account = bankService.createAccount(customerId, accountTypeId);
        return ResponseEntity.status(HttpStatus.CREATED)
                .body("Account created successfully with ID: " + account.getAccountId() + 
                     " and type: " + account.getAccountType().getAccountType());
    } catch (Exception e) {
        return ResponseEntity.badRequest()
                .body("Account creation failed: " + e.getMessage());
    }
}
4. Transaction Operations
java
// Deposit Money
@PostMapping("/accounts/{accountId}/deposit")
public ResponseEntity<String> deposit(
        @PathVariable Long accountId,
        @RequestParam BigDecimal amount) {
    try {
        Account account = bankService.deposit(accountId, amount);
        return ResponseEntity.ok(String.format(
            "Deposit successful. New balance: %.2f", account.getBalance()));
    } catch (Exception e) {
        return ResponseEntity.badRequest()
                .body("Deposit failed: " + e.getMessage());
    }
}

// Withdraw Money
@PostMapping("/accounts/{accountId}/withdraw")
public ResponseEntity<String> withdraw(
        @PathVariable Long accountId,
        @RequestParam BigDecimal amount) {
    try {
        Account account = bankService.withdraw(accountId, amount);
        return ResponseEntity.ok(String.format(
            "Withdrawal successful. New balance: %.2f", account.getBalance()));
    } catch (Exception e) {
        return ResponseEntity.badRequest()
                .body("Withdrawal failed: " + e.getMessage());
    }
}
5. View Operations
java
// View Balance
@GetMapping("/accounts/{accountId}/balance")
public ResponseEntity<String> getBalance(@PathVariable Long accountId) {
    try {
        BigDecimal balance = bankService.getBalance(accountId);
        return ResponseEntity.ok(String.format("Current balance: %.2f", balance));
    } catch (Exception e) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body("Balance check failed: " + e.getMessage());
    }
}














1. User Registration (BankController.java)
java
@PostMapping("/register")
public ResponseEntity<String> registerUser(
        @RequestParam String username,
        @RequestParam String password) {
    
    if (userLoginRepository.findByUsername(username) != null) {
        return ResponseEntity.badRequest().body("Username already exists");
    }
    
    UserLogin user = new UserLogin();
    user.setUsername(username);
    user.setPassword(password); // Remember to hash in production
    userLoginRepository.save(user);
    
    return ResponseEntity.ok("Registration successful");
}
2. User Login (BankController.java)
java
@PostMapping("/login")
public ResponseEntity<String> loginUser(
        @RequestParam String username,
        @RequestParam String password) {
    
    UserLogin user = userLoginRepository.findByUsername(username);
    if (user == null) {
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid username");
    }
    
    if (!user.getPassword().equals(password)) { // Use passwordEncoder.matches() in production
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid password");
    }
    
    return ResponseEntity.ok("Login successful");
}
3. Customer Creation (BankController.java)
java
@PostMapping("/customers")
public ResponseEntity<String> createCustomer(
        @RequestParam Long loginId,
        @RequestParam String name,
        @RequestParam String email) {
    
    if (customerRepository.existsByEmail(email)) {
        return ResponseEntity.badRequest().body("Email already registered");
    }
    
    Customer customer = new Customer();
    // Set fields...
    customerRepository.save(customer);
    
    return ResponseEntity.ok("Customer created successfully");
}
4. Customer Update (BankController.java)
java
@PutMapping("/customers/{id}")
public ResponseEntity<String> updateCustomer(
        @PathVariable Long id,
        @RequestParam(required = false) String name,
        @RequestParam(required = false) String email) {
    
    Customer customer = customerRepository.findById(id).orElse(null);
    if (customer == null) {
        return ResponseEntity.badRequest().body("Customer not found");
    }
    
    if (email != null && customerRepository.existsByEmailAndIdNot(email, id)) {
        return ResponseEntity.badRequest().body("Email already in use by another customer");
    }
    
    // Update fields...
    customerRepository.save(customer);
    
    return ResponseEntity.ok("Customer updated successfully");
}
5. Account Operations (BankController.java)
java
// Deposit
@PostMapping("/accounts/{accountId}/deposit")
public ResponseEntity<String> deposit(
        @PathVariable Long accountId,
        @RequestParam BigDecimal amount) {
    
    Account account = accountRepository.findById(accountId).orElse(null);
    if (account == null) {
        return ResponseEntity.badRequest().body("Account not found");
    }
    
    account.setBalance(account.getBalance().add(amount));
    accountRepository.save(account);
    
    return ResponseEntity.ok("Deposit successful. New balance: " + account.getBalance());
}

// Withdrawal
@PostMapping("/accounts/{accountId}/withdraw")
public ResponseEntity<String> withdraw(
        @PathVariable Long accountId,
        @RequestParam BigDecimal amount) {
    
    Account account = accountRepository.findById(accountId).orElse(null);
    if (account == null) {
        return ResponseEntity.badRequest().body("Account not found");
    }
    
    if (account.getBalance().compareTo(amount) < 0) {
        return ResponseEntity.badRequest().body("Insufficient balance");
    }
    
    account.setBalance(account.getBalance().subtract(amount));
    accountRepository.save(account);
    
    return ResponseEntity.ok("Withdrawal successful. New balance: " + account.getBalance());
}



























First, Create a Standard Response Format
java
// Add this class in your model package
public class ApiResponse<T> {
    private boolean success;
    private String message;
    private T data;

    // Constructors, Getters & Setters
    public ApiResponse(boolean success, String message, T data) {
        this.success = success;
        this.message = message;
        this.data = data;
    }
    
    // Success static factory method
    public static <T> ApiResponse<T> success(String message, T data) {
        return new ApiResponse<>(true, message, data);
    }
    
    // Error static factory method
    public static <T> ApiResponse<T> error(String message) {
        return new ApiResponse<>(false, message, null);
    }
}
2. Update Your BankController
java
@RestController
@RequestMapping("/api/bank")
public class BankController {
    
    @Autowired
    private BankService bankService;

    // User Registration
    @PostMapping("/register")
    public ResponseEntity<ApiResponse<UserLogin>> registerUser(
            @RequestParam String username,
            @RequestParam String password) {
        
        try {
            UserLogin user = bankService.registerUser(username, password);
            return ResponseEntity.ok(
                ApiResponse.success("Registration successful", user)
            );
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(
                ApiResponse.error("Registration failed: " + e.getMessage())
            );
        }
    }

    // User Login
    @PostMapping("/login")
    public ResponseEntity<ApiResponse<UserLogin>> loginUser(
            @RequestParam String username,
            @RequestParam String password) {
        
        UserLogin user = bankService.loginUser(username, password);
        if (user != null) {
            return ResponseEntity.ok(
                ApiResponse.success("Login successful", user)
            );
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(
                ApiResponse.error("Invalid credentials")
            );
        }
    }

    // Create Customer
    @PostMapping("/customer")
    public ResponseEntity<ApiResponse<Customer>> createCustomer(
            @RequestParam Long loginId,
            @RequestParam String name,
            @RequestParam String email,
            @RequestParam(required = false) String phone,
            @RequestParam(required = false) String address,
            @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") Date dob) {
        
        try {
            Customer customer = bankService.createCustomer(loginId, name, email, phone, address, dob);
            return ResponseEntity.ok(
                ApiResponse.success("Customer created successfully", customer)
            );
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(
                ApiResponse.error("Failed to create customer: " + e.getMessage())
            );
        }
    }

    // Update Customer
    @PutMapping("/customer/{customerId}")
    public ResponseEntity<ApiResponse<Customer>> updateCustomer(
            @PathVariable Long customerId,
            @RequestParam(required = false) String name,
            @RequestParam(required = false) String email,
            @RequestParam(required = false) String phone,
            @RequestParam(required = false) String address,
            @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") Date dob) {
        
        try {
            Customer customer = bankService.updateCustomer(customerId, name, email, phone, address, dob);
            return ResponseEntity.ok(
                ApiResponse.success("Customer updated successfully", customer)
            );
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(
                ApiResponse.error("Failed to update customer: " + e.getMessage())
            );
        }
    }

    // Deposit Money
    @PostMapping("/account/{accountId}/deposit")
    public ResponseEntity<ApiResponse<Account>> deposit(
            @PathVariable Long accountId,
            @RequestParam BigDecimal amount) {
        
        try {
            Account account = bankService.deposit(accountId, amount);
            return ResponseEntity.ok(
                ApiResponse.success("Deposit successful. New balance: " + account.getBalance(), account)
            );
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(
                ApiResponse.error("Deposit failed: " + e.getMessage())
            );
        }
    }

    // Withdraw Money
    @PostMapping("/account/{accountId}/withdraw")
    public ResponseEntity<ApiResponse<Account>> withdraw(
            @PathVariable Long accountId,
            @RequestParam BigDecimal amount) {
        
        try {
            Account account = bankService.withdraw(accountId, amount);
            return ResponseEntity.ok(
                ApiResponse.success("Withdrawal successful. New balance: " + account.getBalance(), account)
            );
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(
                ApiResponse.error("Withdrawal failed: " + e.getMessage())
            );
        }
    }
}
3. Update Your BankService Methods to Throw Exceptions
java
// Example for loginUser
public UserLogin loginUser(String username, String password) {
    UserLogin user = userLoginRepository.findByUsername(username);
    if (user == null || !user.getPassword().equals(password)) {
        throw new RuntimeException("Invalid username or password");
    }
    return user;
}

// Example for withdraw
public Account withdraw(Long accountId, BigDecimal amount) {
    Account account = accountRepository.findById(accountId)
        .orElseThrow(() -> new RuntimeException("Account not found"));
    
    if (account.getBalance().compareTo(amount) < 0) {
        throw new RuntimeException("Insufficient balance");
    }
    
    account.setBalance(account.getBalance().subtract(amount));
    return accountRepository.save(account);
}
4. Expected Postman Responses
Successful Registration:

json
{
  "success": true,
  "message": "Registration successful",
  "data": {
    "loginId": 1,
    "username": "john_doe",
    "password": "hashed_password"
  }
}
Failed Login:

json
{
  "success": false,
  "message": "Invalid credentials",
  "data": null
}
Successful Deposit:

json
{
  "success": true,
  "message": "Deposit successful. New balance: 1500.00",
  "data": {
    "accountId": 1,
    "balance": 1500.00
  }
}
Failed Withdrawal (Insufficient Balance):

json
{
  "success": false,
  "message": "Withdrawal failed: Insufficient balance",
  "data": null
}
5. Additional Improvements
Custom Exceptions (Recommended):

java
public class InsufficientBalanceException extends RuntimeException {
    public InsufficientBalanceException(String message) {
        super(message);
    }
}

// Then use it in service:
throw new InsufficientBalanceException("Insufficient balance for withdrawal");
Global Exception Handler:

java
@ControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<ApiResponse<?>> handleRuntimeException(RuntimeException ex) {
        return ResponseEntity.badRequest()
            .body(ApiResponse.error(ex.getMessage()));
    }
    
    @ExceptionHandler(InsufficientBalanceException.class)
    public ResponseEntity<ApiResponse<?>> handleInsufficientBalance(InsufficientBalanceException ex) {
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
            .body(ApiResponse.error(ex.getMessage()));
    }
}
This implementation gives you:

Consistent response format across all endpoints

Clear success/error messages in Postman

Proper error handling for all scenarios

Detailed feedback for frontend applications

Would you like me to add any specific messages for other operations like account creation or transaction history?

for account creation also do same
Here's how to implement clear success/error messages for account creation, following the same pattern as other operations:

1. Update the BankController.java
java
// Account Creation Endpoint
@PostMapping("/account")
public ResponseEntity<ApiResponse<Account>> createAccount(
        @RequestParam Long customerId,
        @RequestParam Long accountTypeId) {
    
    try {
        Account account = bankService.createAccount(customerId, accountTypeId);
        return ResponseEntity.ok(
            ApiResponse.success("Account created successfully", account)
        );
    } catch (Exception e) {
        return ResponseEntity.badRequest().body(
            ApiResponse.error("Account creation failed: " + e.getMessage())
        );
    }
}
2. Enhance the BankService.java
java
@Transactional
public Account createAccount(Long customerId, Long accountTypeId) {
    // 1. Validate customer exists
    Customer customer = customerRepository.findById(customerId)
        .orElseThrow(() -> new RuntimeException("Customer not found with ID: " + customerId));
    
    // 2. Validate account type exists
    AccountType accountType = accountTypeRepository.findById(accountTypeId)
        .orElseThrow(() -> new RuntimeException("Invalid account type"));
    
    // 3. Create new account
    Account account = new Account();
    account.setCustomer(customer);
    account.setAccountType(accountType);
    account.setBalance(BigDecimal.ZERO);
    
    // 4. Save and return
    return accountRepository.save(account);
}
3. Expected Postman Responses
Successful Account Creation:

json
{
  "success": true,
  "message": "Account created successfully",
  "data": {
    "accountId": 101,
    "customer": {
      "customerId": 1,
      "name": "John Doe"
    },
    "accountType": {
      "accountTypeId": 1,
      "accountType": "SAVINGS"
    },
    "balance": 0.00
  }
}
Failed Cases:

Invalid Customer ID:

json
{
  "success": false,
  "message": "Account creation failed: Customer not found with ID: 999",
  "data": null
}
Invalid Account Type:

json
{
  "success": false,
  "message": "Account creation failed: Invalid account type",
  "data": null
}
4. Additional Improvements
Custom Exception Classes (Recommended):

java
// Add these in your exception package
public class CustomerNotFoundException extends RuntimeException {
    public CustomerNotFoundException(Long customerId) {
        super("Customer not found with ID: " + customerId);
    }
}

public class InvalidAccountTypeException extends RuntimeException {
    public InvalidAccountTypeException() {
        super("Invalid account type");
    }
}

// Update service method
public Account createAccount(Long customerId, Long accountTypeId) {
    Customer customer = customerRepository.findById(customerId)
        .orElseThrow(() -> new CustomerNotFoundException(customerId));
    
    AccountType accountType = accountTypeRepository.findById(accountTypeId)
        .orElseThrow(InvalidAccountTypeException::new);
    
    // ... rest of the method
}
Global Exception Handler Update:

java
@ControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(CustomerNotFoundException.class)
    public ResponseEntity<ApiResponse<?>> handleCustomerNotFound(CustomerNotFoundException ex) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
            .body(ApiResponse.error(ex.getMessage()));
    }
    
    @ExceptionHandler(InvalidAccountTypeException.class)
    public ResponseEntity<ApiResponse<?>> handleInvalidAccountType(InvalidAccountTypeException ex) {
        return ResponseEntity.badRequest()
            .body(ApiResponse.error(ex.getMessage()));
    }
}
5. Testing in Postman
Request:

POST http://localhost:8080/api/bank/account?customerId=1&accountTypeId=1
Possible Responses:

Success (HTTP 200):

json
{
  "success": true,
  "message": "Account created successfully",
  "data": {
    "accountId": 101,
    "balance": 0.00,
    "accountType": "SAVINGS"
  }
}
Customer Not Found (HTTP 404):

json
{
  "success": false,
  "message": "Customer not found with ID: 999",
  "data": null
}
Invalid Account Type (HTTP 400):

json
{
  "success": false,
  "message": "Invalid account type",
  "data": null
}










@PostMapping("/customer")
public ResponseEntity<Customer> createCustomer(
        @RequestParam Long loginId,
        @RequestParam String name,
        @RequestParam String email,
        @RequestParam(required = false) String phone,
        @RequestParam(required = false) String address,
        @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") Date dob) {
    
    Customer customer = bankService.createCustomer(loginId, name, email, phone, address, dob);
    return customer != null ? ResponseEntity.ok(customer) : ResponseEntity.badRequest().build();
}





















@Service
public class BankService {

    @Autowired
    private BankTransactionRepository transactionRepository;

    @Autowired
    private AccountBalanceRepository balanceRepository;

    public void deposit(BankTransaction transaction) {
        // Update balance
        AccountBalance balance = balanceRepository.findByCustomerId(transaction.getCustomerId());
        if (balance == null) {
            throw new RuntimeException("Customer not found");
        }

        balance.setBalance(balance.getBalance() + transaction.getAmount());
        balanceRepository.save(balance);

        // Save transaction
        transactionRepository.save(transaction);
    }

    // Similarly, you can add a withdraw() method if needed
}
⚠️ Important: Ensure you’ve added @Repository interfaces like:

java
Copy
Edit
public interface BankTransactionRepository extends JpaRepository<BankTransaction, Long> {}
public interface AccountBalanceRepository extends JpaRepository<AccountBalance, Long> {
    AccountBalance findByCustomerId(Long customerId);
}
✅ What to Do Next
Once the deposit() method exists in BankService, your endpoint will work without error.

Would you like the withdraw() method implemented too?






You said:
do for withdraw also


ChatGPT said:
Perfect — here's how to implement the withdraw() method in your BankService, and the corresponding controller endpoint.

✅ 1. Add withdraw() in BankService
java
Copy
Edit
public void withdraw(BankTransaction transaction) {
    // Get current balance
    AccountBalance balance = balanceRepository.findByCustomerId(transaction.getCustomerId());
    if (balance == null) {
        throw new RuntimeException("Customer not found");
    }

    // Check for sufficient funds
    if (balance.getBalance() < transaction.getAmount()) {
        throw new RuntimeException("Insufficient balance");
    }

    // Deduct amount and update balance
    balance.setBalance(balance.getBalance() - transaction.getAmount());
    balanceRepository.save(balance);

    // Save transaction
    transactionRepository.save(transaction);
}
✅ 2. Add Withdraw Endpoint in BankController
java
Copy
Edit
@PostMapping("/withdraw")
public ResponseEntity<String> withdraw(@RequestBody BankTransaction transaction) {
    bankService.withdraw(transaction);
    return ResponseEntity.ok("Withdrawal successful");
}
✅ 3. Postman Test for Withdrawal
POST http://localhost:8080/api/bank/withdraw
Headers:

pgsql
Copy
Edit
Content-Type: application/json
Body:

json
Copy
Edit
{
  "customerId": 1,
  "transactionType": "WITHDRAW",
  "amount": 500,
  "transactionDate": "2025-05-07"
}












CREATE SEQUENCE customer_id_seq
    START WITH 1
    INCREMENT BY 1
    NOCACHE;


CREATE OR REPLACE TRIGGER customer_id_trigger
    BEFORE INSERT ON INTERN_CUSTOMER
    FOR EACH ROW
BEGIN
    :NEW.CUSTOMER_ID := customer_id_seq.NEXTVAL;
END;




public Customer createCustomer(Customer customer) {
    // Fetch the AccountType based on accountTypeId
    AccountType accountType = accountTypeRepo.findById(customer.getAccountType().getId())
            .orElseThrow(() -> new CustomException("Invalid account type"));

    customer.setAccountType(accountType);  // Set the accountType for the customer
    return customerRepo.save(customer);
}






















@PostMapping("/customers")
public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {
    // Validate required fields or add custom logic
    if (customer.getName() == null || customer.getEmail() == null) {
        throw new CustomException("Name and Email are required fields.");
    }

    Customer createdCustomer = bankService.createCustomer(customer);
    return ResponseEntity.status(HttpStatus.CREATED).body(createdCustomer);
}





{
  "login": {
    "loginId": 1,
    "username": "new_user",
    "password": "password123"
  },
  "name": "John Doe",
  "email": "john.doe@example.com",
  "phone": "9876543210",
  "address": "123 Street, City",
  "dob": "1990-01-01",
  "accountTypeId": 1
}






package com.intern.bank.model;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "INTERN_CUSTOMER")
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)  // Automatically generate the ID
    @Column(name = "CUSTOMER_ID")
    private Long id;

    @OneToOne
    @JoinColumn(name = "LOGIN_ID")
    private UserLogin login;

    @ManyToOne
    @JoinColumn(name = "ACCOUNT_TYPE_ID")
    private AccountType accountType;

    @Column(name = "NAME")
    private String name;

    @Column(name = "EMAIL")
    private String email;

    @Column(name = "PHONE")
    private String phone;

    @Column(name = "ADDRESS")
    private String address;

    @Column(name = "DOB")
    private LocalDate dob;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public UserLogin getLogin() { return login; }
    public void setLogin(UserLogin login) { this.login = login; }

    public AccountType getAccountType() { return accountType; }
    public void setAccountType(AccountType accountType) { this.accountType = accountType; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public LocalDate getDob() { return dob; }
    public void setDob(LocalDate dob) { this.dob = dob; }
}
