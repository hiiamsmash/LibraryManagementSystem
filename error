@PostMapping("/customer")
public ResponseEntity<Customer> createCustomer(
        @RequestParam Long loginId,
        @RequestParam String name,
        @RequestParam String email,
        @RequestParam(required = false) String phone,
        @RequestParam(required = false) String address,
        @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") Date dob) {
    
    Customer customer = bankService.createCustomer(loginId, name, email, phone, address, dob);
    return customer != null ? ResponseEntity.ok(customer) : ResponseEntity.badRequest().build();
}





















@Service
public class BankService {

    @Autowired
    private BankTransactionRepository transactionRepository;

    @Autowired
    private AccountBalanceRepository balanceRepository;

    public void deposit(BankTransaction transaction) {
        // Update balance
        AccountBalance balance = balanceRepository.findByCustomerId(transaction.getCustomerId());
        if (balance == null) {
            throw new RuntimeException("Customer not found");
        }

        balance.setBalance(balance.getBalance() + transaction.getAmount());
        balanceRepository.save(balance);

        // Save transaction
        transactionRepository.save(transaction);
    }

    // Similarly, you can add a withdraw() method if needed
}
⚠️ Important: Ensure you’ve added @Repository interfaces like:

java
Copy
Edit
public interface BankTransactionRepository extends JpaRepository<BankTransaction, Long> {}
public interface AccountBalanceRepository extends JpaRepository<AccountBalance, Long> {
    AccountBalance findByCustomerId(Long customerId);
}
✅ What to Do Next
Once the deposit() method exists in BankService, your endpoint will work without error.

Would you like the withdraw() method implemented too?






You said:
do for withdraw also


ChatGPT said:
Perfect — here's how to implement the withdraw() method in your BankService, and the corresponding controller endpoint.

✅ 1. Add withdraw() in BankService
java
Copy
Edit
public void withdraw(BankTransaction transaction) {
    // Get current balance
    AccountBalance balance = balanceRepository.findByCustomerId(transaction.getCustomerId());
    if (balance == null) {
        throw new RuntimeException("Customer not found");
    }

    // Check for sufficient funds
    if (balance.getBalance() < transaction.getAmount()) {
        throw new RuntimeException("Insufficient balance");
    }

    // Deduct amount and update balance
    balance.setBalance(balance.getBalance() - transaction.getAmount());
    balanceRepository.save(balance);

    // Save transaction
    transactionRepository.save(transaction);
}
✅ 2. Add Withdraw Endpoint in BankController
java
Copy
Edit
@PostMapping("/withdraw")
public ResponseEntity<String> withdraw(@RequestBody BankTransaction transaction) {
    bankService.withdraw(transaction);
    return ResponseEntity.ok("Withdrawal successful");
}
✅ 3. Postman Test for Withdrawal
POST http://localhost:8080/api/bank/withdraw
Headers:

pgsql
Copy
Edit
Content-Type: application/json
Body:

json
Copy
Edit
{
  "customerId": 1,
  "transactionType": "WITHDRAW",
  "amount": 500,
  "transactionDate": "2025-05-07"
}












CREATE SEQUENCE customer_id_seq
    START WITH 1
    INCREMENT BY 1
    NOCACHE;


CREATE OR REPLACE TRIGGER customer_id_trigger
    BEFORE INSERT ON INTERN_CUSTOMER
    FOR EACH ROW
BEGIN
    :NEW.CUSTOMER_ID := customer_id_seq.NEXTVAL;
END;




public Customer createCustomer(Customer customer) {
    // Fetch the AccountType based on accountTypeId
    AccountType accountType = accountTypeRepo.findById(customer.getAccountType().getId())
            .orElseThrow(() -> new CustomException("Invalid account type"));

    customer.setAccountType(accountType);  // Set the accountType for the customer
    return customerRepo.save(customer);
}






















@PostMapping("/customers")
public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {
    // Validate required fields or add custom logic
    if (customer.getName() == null || customer.getEmail() == null) {
        throw new CustomException("Name and Email are required fields.");
    }

    Customer createdCustomer = bankService.createCustomer(customer);
    return ResponseEntity.status(HttpStatus.CREATED).body(createdCustomer);
}





{
  "login": {
    "loginId": 1,
    "username": "new_user",
    "password": "password123"
  },
  "name": "John Doe",
  "email": "john.doe@example.com",
  "phone": "9876543210",
  "address": "123 Street, City",
  "dob": "1990-01-01",
  "accountTypeId": 1
}






package com.intern.bank.model;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "INTERN_CUSTOMER")
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)  // Automatically generate the ID
    @Column(name = "CUSTOMER_ID")
    private Long id;

    @OneToOne
    @JoinColumn(name = "LOGIN_ID")
    private UserLogin login;

    @ManyToOne
    @JoinColumn(name = "ACCOUNT_TYPE_ID")
    private AccountType accountType;

    @Column(name = "NAME")
    private String name;

    @Column(name = "EMAIL")
    private String email;

    @Column(name = "PHONE")
    private String phone;

    @Column(name = "ADDRESS")
    private String address;

    @Column(name = "DOB")
    private LocalDate dob;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public UserLogin getLogin() { return login; }
    public void setLogin(UserLogin login) { this.login = login; }

    public AccountType getAccountType() { return accountType; }
    public void setAccountType(AccountType accountType) { this.accountType = accountType; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public LocalDate getDob() { return dob; }
    public void setDob(LocalDate dob) { this.dob = dob; }
}
