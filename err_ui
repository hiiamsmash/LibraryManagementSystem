
Sure! Hereâ€™s the complete and fully working code for both:

â¸»

âœ… csv-export.service.ts

// src/app/services/csv-export.service.ts

import { Injectable } from '@angular/core';
import * as XLSX from 'xlsx';
import * as FileSaver from 'file-saver';

@Injectable({
  providedIn: 'root',
})
export class CsvExportService {
  exportAsCSV(data: any[], filename: string): void {
    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(data, { skipHeader: false });
    const csvData = XLSX.write(
      { Sheets: { data: worksheet }, SheetNames: ['data'] },
      { bookType: 'csv', type: 'array' }
    );
    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });
    FileSaver.saveAs(blob, `${filename}.csv`);
  }
}


â¸»

âœ… view-transactions.component.ts

// src/app/view-transactions/view-transactions.component.ts

import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CsvExportService } from '../services/csv-export.service';

@Component({
  selector: 'app-view-transactions',
  templateUrl: './view-transactions.component.html',
})
export class ViewTransactionsComponent {
  accountNumber!: number;
  transactions: any[] = [];
  message = '';

  constructor(private http: HttpClient, private csvService: CsvExportService) {}

  getTransactions() {
    const url = `http://localhost:8080/api/bank/account/${this.accountNumber}/transactions`;
    this.http.get<any[]>(url).subscribe({
      next: (data) => {
        this.transactions = data;
        this.message = `Found ${data.length} transactions.`;
        console.log('Fetched transactions:', data);
      },
      error: () => {
        this.message = 'Failed to fetch transactions.';
      }
    });
  }

  downloadCSV() {
    const flattenedTransactions = this.transactions.map((txn) => ({
      transactionId: txn.transactionId,
      transactionType: txn.transactionType,
      amount: txn.amount,
      transactionDate: new Date(txn.transactionDate).toLocaleString(),
      referenceNo: txn.referenceNo,
      accountNumber: txn.account?.accountNumber ?? 'N/A'  // âœ… Corrected
    }));

    console.log('Flattened for CSV:', flattenedTransactions);

    this.csvService.exportAsCSV(flattenedTransactions, `transactions_${this.accountNumber}`);
  }
}


â¸»

âœ… Example view-transactions.component.html

<div class="container">
  <h2>View Transactions</h2>

  <form (ngSubmit)="getTransactions()">
    <label>Account Number:</label>
    <input type="number" [(ngModel)]="accountNumber" name="accountNumber" required />
    <button type="submit">Get Transactions</button>
  </form>

  <p *ngIf="message">{{ message }}</p>

  <table *ngIf="transactions.length > 0" border="1">
    <thead>
      <tr>
        <th>ID</th>
        <th>Type</th>
        <th>Amount</th>
        <th>Date</th>
        <th>Ref No</th>
        <th>Account Number</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let t of transactions">
        <td>{{ t.transactionId }}</td>
        <td>{{ t.transactionType }}</td>
        <td>{{ t.amount }}</td>
        <td>{{ t.transactionDate | date: 'yyyy-MM-dd HH:mm:ss' }}</td>
        <td>{{ t.referenceNo }}</td>
        <td>{{ t.account?.accountNumber }}</td>
      </tr>
    </tbody>
  </table>

  <button *ngIf="transactions.length > 0" (click)="downloadCSV()">Download CSV</button>
</div>


â¸»

Let me know if you want to export Excel .xlsx instead of CSV, or want date filters for export!









//////////

Great! Since your Spring Boot backend creates a reference number and stores the transaction date/time, we just need to ensure the Angular frontend displays both of these fields in the transaction history.

â¸»

âœ… Update: ViewTransactionsComponent

ðŸ“„ view-transactions.component.html

Update the HTML table to show Reference No. and Transaction Date with Time:

<h2>Transaction History</h2>

<form (ngSubmit)="fetchTransactions()">
  <label for="accountNumber">Account Number:</label>
  <input type="number" [(ngModel)]="accountNumber" name="accountNumber" required>
  <button type="submit">View Transactions</button>
</form>

<p *ngIf="errorMessage">{{ errorMessage }}</p>

<table *ngIf="transactions.length > 0" border="1">
  <thead>
    <tr>
      <th>Transaction ID</th>
      <th>Account Number</th>
      <th>Type</th>
      <th>Amount</th>
      <th>Reference No.</th>
      <th>Date & Time</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let txn of transactions">
      <td>{{ txn.transactionId }}</td>
      <td>{{ txn.account.accountId }}</td>
      <td>{{ txn.transactionType }}</td>
      <td>{{ txn.amount }}</td>
      <td>{{ txn.referenceNo }}</td>
      <td>{{ txn.transactionDate | date: 'yyyy-MM-dd HH:mm:ss' }}</td>
    </tr>
  </tbody>
</table>


â¸»

âœ… Backend: Ensure these fields are in the response

Make sure your BankTransaction entity has these fields:

private String referenceNo;
private Date transactionDate;

And your @GetMapping("/account/{accountNumber}/transactions") returns a list of complete BankTransaction objects, like:

[
  {
    "transactionId": 1,
    "transactionType": "WITHDRAW",
    "amount": 500,
    "referenceNo": "WITH202506091538327243",
    "transactionDate": "2025-06-09T15:38:32.000+05:30",
    "account": {
      "accountId": 1001
    }
  }
]


â¸»

If your Spring Boot backend hides fields or uses DTOs, then include referenceNo and transactionDate in your DTO or entity serialization.

Let me know if you want to format the reference number differently or add export/download options!














// File: src/app/app.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Banking App';
}

// File: src/app/app.component.html
<router-outlet></router-outlet>

// File: src/app/app.routes.ts
import { Routes } from '@angular/router';
import { LoginComponent } from './components/login/login.component';
import { RegisterComponent } from './components/register/register.component';

export const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { path: '', redirectTo: 'login', pathMatch: 'full' }
];

// File: src/app/app.config.ts
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';

export const appConfig = [
  provideRouter(routes)
];

// File: src/app/services/auth.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class AuthService {
  private apiUrl = 'http://localhost:8080/api/auth';

  constructor(private http: HttpClient) {}

  login(email: string, password: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/login`, { email, password });
  }

  register(name: string, email: string, password: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/register`, { name, email, password });
  }
}

// File: src/app/components/login/login.component.ts
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html'
})
export class LoginComponent {
  email = '';
  password = '';
  error = '';

  constructor(private authService: AuthService, private router: Router) {}

  login() {
    this.authService.login(this.email, this.password).subscribe({
      next: () => this.router.navigate(['/dashboard']),
      error: () => this.error = 'Invalid credentials'
    });
  }
}

// File: src/app/components/login/login.component.html
<div class="container">
  <h2>Login</h2>
  <form (ngSubmit)="login()">
    <input type="email" [(ngModel)]="email" name="email" placeholder="Email" required>
    <input type="password" [(ngModel)]="password" name="password" placeholder="Password" required>
    <button type="submit">Login</button>
  </form>
  <p *ngIf="error" class="error">{{ error }}</p>
</div>

// File: src/app/components/register/register.component.ts
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html'
})
export class RegisterComponent {
  name = '';
  email = '';
  password = '';

  constructor(private authService: AuthService, private router: Router) {}

  register() {
    this.authService.register(this.name, this.email, this.password).subscribe({
      next: () => this.router.navigate(['/login']),
      error: (err) => console.error(err)
    });
  }
}

// File: src/app/components/register/register.component.html
<div class="container">
  <h2>Register</h2>
  <form (ngSubmit)="register()">
    <input type="text" [(ngModel)]="name" name="name" placeholder="Name" required>
    <input type="email" [(ngModel)]="email" name="email" placeholder="Email" required>
    <input type="password" [(ngModel)]="password" name="password" placeholder="Password" required>
    <button type="submit">Register</button>
  </form>
</div>

// File: src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { provideHttpClient } from '@angular/common/http';
import { provideAnimations } from '@angular/platform-browser/animations';
import { provideClientHydration } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { LoginComponent } from './components/login/login.component';
import { RegisterComponent } from './components/register/register.component';
import { appConfig } from './app.config';

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    RegisterComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [
    provideHttpClient(),
    provideAnimations(),
    provideClientHydration(),
    appConfig
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}












// File: src/app/services/auth.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = 'http://localhost:8080/api/auth';

  constructor(private http: HttpClient) {}

  login(email: string, password: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/login`, { email, password });
  }

  register(name: string, email: string, password: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/register`, { name, email, password });
  }

  logout(): void {
    localStorage.removeItem('token');
  }

  saveToken(token: string): void {
    localStorage.setItem('token', token);
  }

  getToken(): string | null {
    return localStorage.getItem('token');
  }

  isAuthenticated(): boolean {
    return !!this.getToken();
  }
}




import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {

  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): boolean {
    if (this.authService.isAuthenticated()) {
      return true;
    } else {
      this.router.navigate(['/login']);

      return false;
    }
  }
}




import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));




<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>BankApp</title>
  <base href="/"> <!-- IMPORTANT -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
  <app-root></app-root> <!-- IMPORTANT -->
</body>
</html>





import { Routes } from '@angular/router';
import { provideRouter } from '@angular/router';

import { LoginComponent } from './components/login/login.component';
import { RegisterComponent } from './components/register/register.component';
import { DashboardComponent } from './components/dashboard/dashboard.component';
import { CustomerListComponent } from './components/customers/customer-list.component';
import { AccountListComponent } from './components/accounts/account-list.component';
import { TransactionListComponent } from './components/transactions/transaction-list.component';
import { AuthGuard } from './guards/auth.guard';

export const routes: Routes = [
  { path: '', redirectTo: 'login', pathMatch: 'full' },
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },
  { path: 'customers', component: CustomerListComponent, canActivate: [AuthGuard] },
  { path: 'accounts', component: AccountListComponent, canActivate: [AuthGuard] },
  { path: 'transactions', component: TransactionListComponent, canActivate: [AuthGuard] },
];


import { ApplicationConfig } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideRouter(routes)
  ]
};




import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { appConfig } from './app/app.config';

bootstrapApplication(AppComponent, appConfig)
  .catch(err => console.error(err));




import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';

@Component({
  standalone: true,
  selector: 'app-login',
  templateUrl: './login.component.html',
  imports: [CommonModule, FormsModule, RouterModule]
})



@Component({
  standalone: true,
  selector: 'app-root',
  templateUrl: './app.component.html',
  imports: [RouterModule]
})



{
  "compilerOptions": {
    "baseUrl": "./",
    "paths": {
      "@app/*": ["app/*"]
    }
  },
  "exclude": ["test.ts", "**/*.spec.ts"]
}

export class AppComponent {
  title = 'Banking App';
}

