CompleteBankingSystem/
├── pom.xml
└── src/
    └── main/
        ├── java/com/intern/bank/
        │   ├── BankApplication.java
        │   ├── controller/
        │   │   ├── AuthController.java
        │   │   └── BankController.java
        │   ├── exception/
        │   │   └── CustomException.java
        │   ├── model/
        │   │   ├── UserLogin.java
        │   │   ├── Customer.java
        │   │   ├── AccountType.java
        │   │   ├── AccountBalance.java
        │   │   └── Transaction.java
        │   ├── repository/
        │   │   ├── UserLoginRepository.java
        │   │   ├── CustomerRepository.java
        │   │   ├── AccountTypeRepository.java
        │   │   ├── AccountBalanceRepository.java
        │   │   └── TransactionRepository.java
        │   └── service/
        │       ├── AuthService.java
        │       └── BankService.java
        └── resources/
            └── application.properties









// ✅ BankApplication.java
package com.intern.bank;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BankApplication {
    public static void main(String[] args) {
        SpringApplication.run(BankApplication.class, args);
    }
}

// ✅ CustomException.java
package com.intern.bank.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.BAD_REQUEST)
public class CustomException extends RuntimeException {
    public CustomException(String message) {
        super(message);
    }
}

// ✅ UserLogin.java
package com.intern.bank.model;

import javax.persistence.*;

@Entity
@Table(name = "INTERN_USER_LOGIN")
public class UserLogin {
    @Id
    @Column(name = "LOGIN_ID")
    private Long loginId;

    @Column(name = "USERNAME", unique = true)
    private String username;

    @Column(name = "PASSWORD")
    private String password;

    // Getters and Setters
    public Long getLoginId() { return loginId; }
    public void setLoginId(Long loginId) { this.loginId = loginId; }
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
}

// ✅ AccountType.java
package com.intern.bank.model;

import javax.persistence.*;

@Entity
@Table(name = "INTERN_ACCOUNT_TYPE")
public class AccountType {
    @Id
    @Column(name = "ACCOUNT_TYPE_ID")
    private Long id;

    @Column(name = "ACCOUNT_TYPE")
    private String accountType;

    @Column(name = "ACCOUNT_DESC")
    private String description;

    @Column(name = "ACCOUNT_TYPE_CODE")
    private String code;

    @Column(name = "ACCOUNT_TYPE_COUNTER")
    private int counter;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getAccountType() { return accountType; }
    public void setAccountType(String accountType) { this.accountType = accountType; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    public String getCode() { return code; }
    public void setCode(String code) { this.code = code; }
    public int getCounter() { return counter; }
    public void setCounter(int counter) { this.counter = counter; }
}

// ✅ Customer.java
package com.intern.bank.model;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "INTERN_CUSTOMER")
public class Customer {
    @Id
    @Column(name = "CUSTOMER_ID")
    private Long id;

    @OneToOne
    @JoinColumn(name = "LOGIN_ID")
    private UserLogin login;

    @ManyToOne
    @JoinColumn(name = "ACCOUNT_TYPE_ID")
    private AccountType accountType;

    @Column(name = "NAME")
    private String name;

    @Column(name = "EMAIL")
    private String email;

    @Column(name = "PHONE")
    private String phone;

    @Column(name = "ADDRESS")
    private String address;

    @Column(name = "DOB")
    private LocalDate dob;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public UserLogin getLogin() { return login; }
    public void setLogin(UserLogin login) { this.login = login; }
    public AccountType getAccountType() { return accountType; }
    public void setAccountType(AccountType accountType) { this.accountType = accountType; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }
    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }
    public LocalDate getDob() { return dob; }
    public void setDob(LocalDate dob) { this.dob = dob; }
}

// ✅ AccountBalance.java
package com.intern.bank.model;

import javax.persistence.*;
import java.math.BigDecimal;

@Entity
@Table(name = "INTERN_ACCOUNT_BALANCE")
public class AccountBalance {
    @Id
    @Column(name = "BALANCE_ID")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "CUSTOMER_ID")
    private Customer customer;

    @Column(name = "BALANCE")
    private BigDecimal balance;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public Customer getCustomer() { return customer; }
    public void setCustomer(Customer customer) { this.customer = customer; }
    public BigDecimal getBalance() { return balance; }
    public void setBalance(BigDecimal balance) { this.balance = balance; }
}

// ✅ Transaction.java
package com.intern.bank.model;

import javax.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "INTERN_BANK_TRANSACTION")
public class Transaction {
    @Id
    @Column(name = "TRANSACTION_ID")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "BALANCE_ID")
    private AccountBalance accountBalance;

    @Column(name = "TRANSACTION_TYPE")
    private String transactionType;

    @Column(name = "AMOUNT")
    private BigDecimal amount;

    @Column(name = "TRANSACTION_DATE")
    private LocalDateTime transactionDate;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public AccountBalance getAccountBalance() { return accountBalance; }
    public void setAccountBalance(AccountBalance accountBalance) { this.accountBalance = accountBalance; }
    public String getTransactionType() { return transactionType; }
    public void setTransactionType(String transactionType) { this.transactionType = transactionType; }
    public BigDecimal getAmount() { return amount; }
    public void setAmount(BigDecimal amount) { this.amount = amount; }
    public LocalDateTime getTransactionDate() { return transactionDate; }
    public void setTransactionDate(LocalDateTime transactionDate) { this.transactionDate = transactionDate; }
}





// ✅ Repositories
package com.intern.bank.repository;

import com.intern.bank.model.*;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;
import java.util.Optional;

public interface UserLoginRepository extends JpaRepository<UserLogin, Long> {
    Optional<UserLogin> findByUsername(String username);
}

public interface CustomerRepository extends JpaRepository<Customer, Long> {}

public interface AccountTypeRepository extends JpaRepository<AccountType, Long> {}

public interface AccountBalanceRepository extends JpaRepository<AccountBalance, Long> {
    List<AccountBalance> findByCustomerId(Long customerId);
}

public interface TransactionRepository extends JpaRepository<Transaction, Long> {
    List<Transaction> findByAccountBalanceId(Long accountId);
}

// ✅ AuthService.java
package com.intern.bank.service;

import com.intern.bank.exception.CustomException;
import com.intern.bank.model.UserLogin;
import com.intern.bank.repository.UserLoginRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class AuthService {
    @Autowired
    private UserLoginRepository userLoginRepository;

    public UserLogin register(UserLogin user) {
        userLoginRepository.findByUsername(user.getUsername())
            .ifPresent(u -> { throw new CustomException("Username already exists"); });
        return userLoginRepository.save(user);
    }

    public void login(UserLogin req) {
        UserLogin user = userLoginRepository.findByUsername(req.getUsername())
            .orElseThrow(() -> new CustomException("User not found"));
        if (!user.getPassword().equals(req.getPassword())) {
            throw new CustomException("Invalid credentials");
        }
    }
}

// ✅ BankService.java
package com.intern.bank.service;

import com.intern.bank.exception.CustomException;
import com.intern.bank.model.*;
import com.intern.bank.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Service
public class BankService {
    @Autowired private CustomerRepository customerRepo;
    @Autowired private AccountTypeRepository typeRepo;
    @Autowired private AccountBalanceRepository balanceRepo;
    @Autowired private TransactionRepository txRepo;

    public Customer createCustomer(Customer c) {
        return customerRepo.save(c);
    }

    public Customer getCustomerById(Long id) {
        return customerRepo.findById(id)
            .orElseThrow(() -> new CustomException("Customer not found"));
    }

    public List<Customer> getAllCustomers() {
        return customerRepo.findAll();
    }

    public AccountBalance createAccount(Long customerId, AccountBalance ab) {
        Customer c = getCustomerById(customerId);
        ab.setCustomer(c);
        if (ab.getBalance() == null) {
            ab.setBalance(BigDecimal.ZERO);
        }
        return balanceRepo.save(ab);
    }

    public List<AccountBalance> getAccountsByCustomer(Long customerId) {
        getCustomerById(customerId);
        return balanceRepo.findByCustomerId(customerId);
    }

    public AccountBalance getAccountById(Long id) {
        return balanceRepo.findById(id)
            .orElseThrow(() -> new CustomException("Account not found"));
    }

    public Transaction deposit(Long accountId, BigDecimal amt) {
        AccountBalance acct = getAccountById(accountId);
        acct.setBalance(acct.getBalance().add(amt));
        balanceRepo.save(acct);

        Transaction tx = new Transaction();
        tx.setAccountBalance(acct);
        tx.setTransactionType("DEPOSIT");
        tx.setAmount(amt);
        tx.setTransactionDate(LocalDateTime.now());
        return txRepo.save(tx);
    }

    public Transaction withdraw(Long accountId, BigDecimal amt) {
        AccountBalance acct = getAccountById(accountId);
        if (acct.getBalance().compareTo(amt) < 0) {
            throw new CustomException("Insufficient funds");
        }
        acct.setBalance(acct.getBalance().subtract(amt));
        balanceRepo.save(acct);

        Transaction tx = new Transaction();
        tx.setAccountBalance(acct);
        tx.setTransactionType("WITHDRAW");
        tx.setAmount(amt);
        tx.setTransactionDate(LocalDateTime.now());
        return txRepo.save(tx);
    }

    public void transfer(Long fromAcctId, Long toAcctId, BigDecimal amt) {
        withdraw(fromAcctId, amt);
        deposit(toAcctId, amt);
    }

    public List<Transaction> getTransactions(Long accountId) {
        return txRepo.findByAccountBalanceId(accountId);
    }
}

// ✅ AuthController.java
package com.intern.bank.controller;

import com.intern.bank.model.UserLogin;
import com.intern.bank.service.AuthService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
public class AuthController {
    @Autowired private AuthService authService;

    @PostMapping("/register")
    public ResponseEntity<UserLogin> register(@RequestBody UserLogin user) {
        return ResponseEntity.ok(authService.register(user));
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody UserLogin req) {
        authService.login(req);
        return ResponseEntity.ok("Login successful");
    }
}

// ✅ BankController.java
package com.intern.bank.controller;

import com.intern.bank.model.*;
import com.intern.bank.service.BankService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;

@RestController
@RequestMapping("/api")
public class BankController {
    @Autowired private BankService bankService;

    @PostMapping("/customers")
    public ResponseEntity<Customer> createCustomer(@RequestBody Customer c) {
        return ResponseEntity.ok(bankService.createCustomer(c));
    }

    @GetMapping("/customers/{id}")
    public ResponseEntity<Customer> getCustomer(@PathVariable Long id) {
        return ResponseEntity.ok(bankService.getCustomerById(id));
    }

    @GetMapping("/customers")
    public ResponseEntity<List<Customer>> getAllCustomers() {
        return ResponseEntity.ok(bankService.getAllCustomers());
    }

    @PostMapping("/customers/{custId}/accounts")
    public ResponseEntity<AccountBalance> createAccount(@PathVariable Long custId, @RequestBody AccountBalance a) {
        return ResponseEntity.ok(bankService.createAccount(custId, a));
    }

    @GetMapping("/customers/{custId}/accounts")
    public ResponseEntity<List<AccountBalance>> getAccountsByCustomer(@PathVariable Long custId) {
        return ResponseEntity.ok(bankService.getAccountsByCustomer(custId));
    }

    @GetMapping("/accounts/{id}")
    public ResponseEntity<AccountBalance> getAccount(@PathVariable Long id) {
        return ResponseEntity.ok(bankService.getAccountById(id));
    }

    @PostMapping("/accounts/{id}/deposit")
    public ResponseEntity<Transaction> deposit(@PathVariable Long id, @RequestParam BigDecimal amount) {
        return ResponseEntity.ok(bankService.deposit(id, amount));
    }

    @PostMapping("/accounts/{id}/withdraw")
    public ResponseEntity<Transaction> withdraw(@PathVariable Long id, @RequestParam BigDecimal amount) {
        return ResponseEntity.ok(bankService.withdraw(id, amount));
    }

    @PostMapping("/accounts/transfer")
    public ResponseEntity<String> transfer(@RequestParam Long from, @RequestParam Long to, @RequestParam BigDecimal amount) {
        bankService.transfer(from, to, amount);
        return ResponseEntity.ok("Transfer completed");
    }

    @GetMapping("/accounts/{id}/transactions")
    public ResponseEntity<List<Transaction>> getTransactions(@PathVariable Long id) {
        return ResponseEntity.ok(bankService.getTransactions(id));
    }
}

