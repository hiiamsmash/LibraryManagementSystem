CREATE TABLE intern_customer_login (
    login_id NUMBER  PRIMARY KEY,
    customer_id NUMBER NOT NULL,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password VARCHAR2(50) NOT NULL,
    CONSTRAINT fk_customer_login FOREIGN KEY (customer_id)
        REFERENCES intern_customer(customer_id)
        ON DELETE CASCADE
);




Perfect! Here’s the complete Spring Boot implementation for handling customer login:

⸻

✅ 1. Entity: CustomerLogin.java

package com.oracle.bankapp.model;

import jakarta.persistence.*;

@Entity
@Table(name = "intern_customer_login")
public class CustomerLogin {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    private Long loginId;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false)
    private String password;

    @OneToOne
    @JoinColumn(name = "customer_id", nullable = false)
    private Customer customer;

    // Getters and Setters
    public Long getLoginId() {
        return loginId;
    }

    public void setLoginId(Long loginId) {
        this.loginId = loginId;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }
}


⸻

✅ 2. Repository: CustomerLoginRepository.java

package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.CustomerLogin;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CustomerLoginRepository extends JpaRepository<CustomerLogin, Long> {
    CustomerLogin findByUsernameAndPassword(String username, String password);
}


⸻

✅ 3. Service: Add to BankService.java

package com.oracle.bankapp.service;

import com.oracle.bankapp.model.Customer;
import com.oracle.bankapp.model.CustomerLogin;
import com.oracle.bankapp.repository.CustomerLoginRepository;
import com.oracle.bankapp.repository.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class BankService {

    @Autowired
    private CustomerLoginRepository customerLoginRepository;

    @Autowired
    private CustomerRepository customerRepository;

    public CustomerLogin customerLogin(String username, String password) {
        return customerLoginRepository.findByUsernameAndPassword(username, password);
    }

    public CustomerLogin registerCustomerLogin(Long customerId, String username, String password) {
        Customer customer = customerRepository.findById(customerId).orElseThrow(() ->
            new IllegalArgumentException("Customer not found with ID: " + customerId)
        );

        CustomerLogin login = new CustomerLogin();
        login.setUsername(username);
        login.setPassword(password);
        login.setCustomer(customer);
        return customerLoginRepository.save(login);
    }
}


⸻

✅ 4. Controller: BankController.java

// Inside your @RestController
@PostMapping("/customer/login")
public ResponseEntity<?> customerLogin(
        @RequestParam String username,
        @RequestParam String password) {

    CustomerLogin login = bankService.customerLogin(username, password);

    if (login != null) {
        return ResponseEntity.ok("Login successful. Customer ID: " + login.getCustomer().getCustomerId());
    } else {
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                .body("Login failed: Invalid credentials");
    }
}

// Optional: Register customer login manually
@PostMapping("/customer/register-login")
public ResponseEntity<String> registerCustomerLogin(
        @RequestParam Long customerId,
        @RequestParam String username,
        @RequestParam String password) {
    try {
        bankService.registerCustomerLogin(customerId, username, password);
        return ResponseEntity.ok("Customer login registered successfully.");
    } catch (Exception e) {
        return ResponseEntity.badRequest().body("Registration failed: " + e.getMessage());
    }
}


⸻

✅ Summary

Part	Status
✅ Entity	CustomerLogin.java
✅ Repository	CustomerLoginRepository.java
✅ Service Logic	In BankService.java
✅ Controller	Login + register endpoints


⸻

Would you now like the Angular login page for the customer side, including customer-dashboard redirection on success?





Great! Here’s the complete Angular setup for the Customer Login Page, storing the logged-in customer ID and redirecting to the customer-dashboard.

⸻

✅ 1. Generate Customer Login Component

Run in terminal:

ng generate component customer-login --standalone


⸻

✅ 2. customer-login.component.ts

import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-customer-login',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './customer-login.component.html',
})
export class CustomerLoginComponent {
  username = '';
  password = '';
  message = '';

  constructor(private http: HttpClient, private router: Router) {}

  onLogin() {
    const url = 'http://localhost:8080/api/bank/customer/login';
    const formData = new FormData();
    formData.append('username', this.username);
    formData.append('password', this.password);

    this.http.post(url, formData, { responseType: 'text' }).subscribe({
      next: (res: string) => {
        const customerIdMatch = res.match(/Customer ID: (\d+)/);
        if (customerIdMatch) {
          const customerId = customerIdMatch[1];
          sessionStorage.setItem('customerId', customerId);
          this.router.navigate(['/customer-dashboard']);
        } else {
          this.message = 'Login failed!';
        }
      },
      error: () => {
        this.message = 'Login failed: Invalid credentials';
      },
    });
  }
}


⸻

✅ 3. customer-login.component.html

<div class="container">
  <h2>Customer Login</h2>
  <form (ngSubmit)="onLogin()">
    <label>Username:</label>
    <input type="text" [(ngModel)]="username" name="username" required />

    <label>Password:</label>
    <input type="password" [(ngModel)]="password" name="password" required />

    <button type="submit">Login</button>
  </form>

  <p style="color: red;" *ngIf="message">{{ message }}</p>
</div>


⸻

✅ 4. Create customer-dashboard Page

ng generate component customer-dashboard --standalone

customer-dashboard.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-customer-dashboard',
  standalone: true,
  imports: [CommonModule],
  template: `<h2>Welcome Customer!</h2><p>Customer ID: {{ customerId }}</p>`,
})
export class CustomerDashboardComponent {
  customerId = sessionStorage.getItem('customerId');
}


⸻

✅ 5. Add to app.routes.ts

import { Routes } from '@angular/router';
import { CustomerLoginComponent } from './customer-login/customer-login.component';
import { CustomerDashboardComponent } from './customer-dashboard/customer-dashboard.component';

export const routes: Routes = [
  { path: 'customer-login', component: CustomerLoginComponent },
  { path: 'customer-dashboard', component: CustomerDashboardComponent },
];


⸻

✅ 6. Add Customer Login Link

In your landing page or login selector page:

<a routerLink="/customer-login">Customer Login</a>


⸻

✅ Result
	•	Customers can now login from /customer-login
	•	Customer ID is stored in sessionStorage
	•	Redirected to /customer-dashboard

⸻

Would you like the customer to view personal info or accounts next inside this dashboard?




Great! Here’s the complete Angular Customer Register Login UI that lets an admin register login credentials for a customer (i.e. create an entry in the intern_customer_login table).

⸻

✅ 1. Generate Component

ng generate component register-customer-login --standalone


⸻

✅ 2. register-customer-login.component.ts

import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-register-customer-login',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './register-customer-login.component.html',
})
export class RegisterCustomerLoginComponent {
  customerId: number | null = null;
  username = '';
  password = '';
  message = '';

  constructor(private http: HttpClient) {}

  onRegister() {
    const formData = new FormData();
    if (this.customerId !== null) {
      formData.append('customerId', this.customerId.toString());
      formData.append('username', this.username);
      formData.append('password', this.password);

      this.http.post('http://localhost:8080/api/bank/customer/register-login', formData, { responseType: 'text' })
        .subscribe({
          next: (res) => this.message = res,
          error: (err) => this.message = err.error || 'Registration failed!'
        });
    } else {
      this.message = 'Customer ID is required.';
    }
  }
}


⸻

✅ 3. register-customer-login.component.html

<div class="container">
  <h2>Register Customer Login</h2>

  <form (ngSubmit)="onRegister()">
    <label for="customerId">Customer ID:</label>
    <input type="number" id="customerId" [(ngModel)]="customerId" name="customerId" required />

    <label for="username">Username:</label>
    <input type="text" id="username" [(ngModel)]="username" name="username" required />

    <label for="password">Password:</label>
    <input type="password" id="password" [(ngModel)]="password" name="password" required />

    <button type="submit">Register</button>
  </form>

  <p *ngIf="message">{{ message }}</p>
</div>


⸻

✅ 4. Add to app.routes.ts or dashboard routes

import { RegisterCustomerLoginComponent } from './register-customer-login/register-customer-login.component';

export const routes: Routes = [
  { path: 'register-customer-login', component: RegisterCustomerLoginComponent },
  // other routes...
];


⸻

✅ Optional: Add Link in Admin Dashboard

<a routerLink="/register-customer-login">Register Customer Login</a>


⸻

This will let you register login credentials for any customer (after they’re created by the admin).
Let me know if you’d like to show all customers in a dropdown or fetch customer names dynamically.










Perfect! Here’s how to implement the backend Spring Boot endpoint:
👉 GET /api/bank/customer/{customerId}/accounts
which returns all accounts belonging to a specific customer.

⸻

✅ Step-by-Step Backend Code

✅ 1. Create the Endpoint in Controller

// BankController.java
@GetMapping("/customer/{customerId}/accounts")
public ResponseEntity<List<Account>> getAccountsByCustomer(@PathVariable Long customerId) {
    try {
        List<Account> accounts = bankService.getAccountsByCustomer(customerId);
        return ResponseEntity.ok(accounts);
    } catch (Exception e) {
        return ResponseEntity.status(HttpStatus.NOT_FOUND)
                .body(Collections.emptyList());
    }
}


⸻

✅ 2. Add Service Method

// BankService.java
public List<Account> getAccountsByCustomer(Long customerId) {
    Customer customer = customerRepository.findById(customerId).orElseThrow(() ->
        new RuntimeException("Customer not found"));

    return accountRepository.findByCustomer(customer);
}


⸻

✅ 3. Add Repository Method

// AccountRepository.java
public interface AccountRepository extends JpaRepository<Account, Long> {
    List<Account> findByCustomer(Customer customer);
}


⸻

✅ 4. Example JSON Response

When a customer with 2 accounts logs in, this endpoint will return:

[
  {
    "accountId": 1,
    "accountNumber": 100001,
    "balance": 5000.0,
    "accountType": {
      "accountTypeId": 1,
      "accountType": "Savings"
    }
  },
  {
    "accountId": 2,
    "accountNumber": 100002,
    "balance": 15000.0,
    "accountType": {
      "accountTypeId": 2,
      "accountType": "Current"
    }
  }
]

You can now use this in Angular to list account numbers with their types.

⸻

✅ Done! Let me know if you want to:
	•	Restrict to active accounts only
	•	Return only minimal fields (DTO)
	•	Show only balance summary

Would you like to move on to GET balance and GET transactions next?











Great! Here’s how to implement the enhanced customer dashboard in Angular:

⸻

✅ Overview of What We’ll Build

When a customer logs in:
	1.	✅ Show a welcome message: “Welcome, username”
	2.	✅ Fetch and display all accounts for that customer
	3.	✅ On account click → Show:
	•	View Balance
	•	View Transactions

⸻

✅ Backend API Assumptions

You need two backend endpoints:
	1.	Get customer by ID
GET /api/bank/customer/{customerId}
→ returns Customer object including username or name
	2.	Get accounts for customer
GET /api/bank/customer/{customerId}/accounts
→ returns list of accounts (accountNumber, accountType, etc.)

⸻

✅ 1. Update customer-dashboard.component.ts

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-customer-dashboard',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './customer-dashboard.component.html',
})
export class CustomerDashboardComponent implements OnInit {
  customerId = sessionStorage.getItem('customerId');
  customerName = '';
  accounts: any[] = [];
  selectedAccount: any = null;
  message = '';

  constructor(private http: HttpClient, private router: Router) {
    if (!this.customerId) {
      this.router.navigate(['/customer-login']);
    }
  }

  ngOnInit(): void {
    this.fetchCustomerInfo();
    this.fetchAccounts();
  }

  fetchCustomerInfo() {
    this.http.get<any>(`http://localhost:8080/api/bank/customer/${this.customerId}`)
      .subscribe({
        next: (res) => this.customerName = res.name || res.username,
        error: () => this.customerName = 'Customer'
      });
  }

  fetchAccounts() {
    this.http.get<any[]>(`http://localhost:8080/api/bank/customer/${this.customerId}/accounts`)
      .subscribe({
        next: (res) => this.accounts = res,
        error: () => this.message = 'Failed to fetch accounts'
      });
  }

  selectAccount(account: any) {
    this.selectedAccount = account;
  }

  logout() {
    sessionStorage.clear();
    this.router.navigate(['/customer-login']);
  }
}


⸻

✅ 2. Update customer-dashboard.component.html

<div class="container">
  <h2>Welcome, {{ customerName }}</h2>

  <button (click)="logout()" style="float: right;">Logout</button>

  <h3>Your Accounts:</h3>
  <ul *ngIf="accounts.length > 0; else noAccounts">
    <li *ngFor="let acc of accounts">
      <button (click)="selectAccount(acc)">
        Account #{{ acc.accountNumber }} - {{ acc.accountType?.accountType || 'N/A' }}
      </button>
    </li>
  </ul>
  <ng-template #noAccounts>
    <p>No accounts found for your profile.</p>
  </ng-template>

  <div *ngIf="selectedAccount" style="margin-top: 20px;">
    <h4>Selected Account: {{ selectedAccount.accountNumber }}</h4>
    <button [routerLink]="['/customer-balance', selectedAccount.accountNumber]">View Balance</button>
    <button [routerLink]="['/customer-transactions', selectedAccount.accountNumber]">View Transactions</button>
  </div>

  <p *ngIf="message" style="color: red">{{ message }}</p>
</div>


⸻

✅ 3. Add Routes in app.routes.ts

Make sure you have these:

{ path: 'customer-dashboard', component: CustomerDashboardComponent },
{ path: 'customer-balance/:accountNumber', component: CustomerBalanceComponent },
{ path: 'customer-transactions/:accountNumber', component: CustomerTransactionsComponent },

(Assuming CustomerBalanceComponent and CustomerTransactionsComponent are created.)

⸻

✅ What’s Next?

Would you like help implementing:
	•	🔄 GET /customer/{customerId}/accounts backend?
	•	📄 View Balance and Transactions components?
	•	✅ Secure routing so customers can’t access dashboard unless logged in?

Let me know what you want to add or build next.









Perfect! Let’s implement dynamic customer dashboard behavior as you described:

⸻

✅ What You Want:
	1.	Customer logs in → sees list of their accounts
	2.	Customer clicks on a particular account
	3.	Then two buttons appear:
	•	✅ View Balance → /customer-balance/:accountNumber
	•	✅ View Transactions → /customer-transactions/:accountNumber
	4.	These pages use the account number to fetch only that customer’s data

⸻

✅ How to Implement This in Angular

✅ 1. Customer Dashboard Component (Updated)

customer-dashboard.component.ts

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router, RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-customer-dashboard',
  standalone: true,
  imports: [CommonModule, HttpClientModule, RouterModule],
  templateUrl: './customer-dashboard.component.html'
})
export class CustomerDashboardComponent implements OnInit {
  customerId = sessionStorage.getItem('customerId');
  customerName = '';
  accounts: any[] = [];
  selectedAccount: any = null;

  constructor(private http: HttpClient, private router: Router) {
    if (!this.customerId) this.router.navigate(['/customer-login']);
  }

  ngOnInit(): void {
    this.fetchCustomerInfo();
    this.fetchAccounts();
  }

  fetchCustomerInfo() {
    this.http.get<any>(`http://localhost:8080/api/bank/customer/${this.customerId}`)
      .subscribe({
        next: (res) => this.customerName = res.name || res.username,
        error: () => this.customerName = 'Customer'
      });
  }

  fetchAccounts() {
    this.http.get<any[]>(`http://localhost:8080/api/bank/customer/${this.customerId}/accounts`)
      .subscribe({
        next: (res) => this.accounts = res,
        error: () => console.error('Failed to fetch accounts')
      });
  }

  selectAccount(account: any) {
    this.selectedAccount = account;
  }

  logout() {
    sessionStorage.clear();
    this.router.navigate(['/customer-login']);
  }
}


⸻

customer-dashboard.component.html

<div class="container">
  <h2>Welcome, {{ customerName }}</h2>

  <button (click)="logout()" style="float: right;">Logout</button>

  <h3>Your Accounts:</h3>
  <ul *ngIf="accounts.length > 0">
    <li *ngFor="let acc of accounts">
      <button (click)="selectAccount(acc)">
        Account #{{ acc.accountNumber }} - {{ acc.accountType?.accountType || 'N/A' }}
      </button>
    </li>
  </ul>

  <div *ngIf="selectedAccount" style="margin-top: 20px;">
    <h4>Selected Account: {{ selectedAccount.accountNumber }}</h4>
    <button [routerLink]="['/customer-balance', selectedAccount.accountNumber]">View Balance</button>
    <button [routerLink]="['/customer-transactions', selectedAccount.accountNumber]">View Transactions</button>
  </div>
</div>


⸻

✅ 2. Route Setup in app.routes.ts

{
  path: 'customer-dashboard',
  component: CustomerDashboardComponent
},
{
  path: 'customer-balance/:accountNumber',
  component: CustomerBalanceComponent // You should create this
},
{
  path: 'customer-transactions/:accountNumber',
  component: CustomerTransactionsComponent // You should create this
}


⸻

✅ 3. Example CustomerBalanceComponent

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-customer-balance',
  standalone: true,
  imports: [CommonModule],
  template: `<h3>Account #{{ accountNumber }} - Balance: {{ balance }}</h3>`
})
export class CustomerBalanceComponent implements OnInit {
  accountNumber = '';
  balance = '';

  constructor(private route: ActivatedRoute, private http: HttpClient) {}

  ngOnInit(): void {
    this.accountNumber = this.route.snapshot.paramMap.get('accountNumber')!;
    this.http.get(`http://localhost:8080/api/bank/accounts/${this.accountNumber}/balance`, { responseType: 'text' })
      .subscribe({
        next: (res) => this.balance = res,
        error: () => this.balance = 'Error fetching balance'
      });
  }
}


⸻

✅ 4. Example CustomerTransactionsComponent

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-customer-transactions',
  standalone: true,
  imports: [CommonModule],
  template: `
    <h3>Transactions for Account #{{ accountNumber }}</h3>
    <table>
      <tr>
        <th>Date</th>
        <th>Type</th>
        <th>Amount</th>
        <th>Reference</th>
      </tr>
      <tr *ngFor="let t of transactions">
        <td>{{ t.transactionDate | date: 'yyyy-MM-dd HH:mm:ss' }}</td>
        <td>{{ t.transactionType }}</td>
        <td>{{ t.amount }}</td>
        <td>{{ t.referenceNo }}</td>
      </tr>
    </table>
  `
})
export class CustomerTransactionsComponent implements OnInit {
  accountNumber = '';
  transactions: any[] = [];

  constructor(private route: ActivatedRoute, private http: HttpClient) {}

  ngOnInit(): void {
    this.accountNumber = this.route.snapshot.paramMap.get('accountNumber')!;
    this.http.get<any[]>(`http://localhost:8080/api/bank/account/${this.accountNumber}/transactions`)
      .subscribe({
        next: (res) => this.transactions = res,
        error: () => console.error('Failed to fetch transactions')
      });
  }
}


⸻

Let me know if you’d like:
	•	Customer to export transactions to CSV
	•	Pagination for transaction history
	•	Add styling with Bootstrap or Angular Material

Ready for those?
