Here’s the complete code and file structure for your Bank Management System built with Spring Boot, Hibernate, and Oracle Database. This version is set up for you to copy and paste into your environment so that it runs directly, and you can test it using Postman with the test URLs provided.

Step 1: Directory Structure
css
Copy
Edit
src/
├── main/
│   ├── java/
│   │   └── com/example/bank/
│   │       ├── BankApplication.java
│   │       ├── controller/
│   │       │   └── BankController.java
│   │       ├── dto/
│   │       │   ├── LoginRequest.java
│   │       │   ├── TransactionRequest.java
│   │       │   └── BalanceResponse.java
│   │       ├── entity/
│   │       │   ├── AccountBalance.java
│   │       │   ├── AccountType.java
│   │       │   ├── BankTransaction.java
│   │       │   ├── Customer.java
│   │       │   └── UserLogin.java
│   │       ├── repository/
│   │       │   ├── AccountBalanceRepository.java
│   │       │   ├── AccountTypeRepository.java
│   │       │   ├── BankTransactionRepository.java
│   │       │   ├── CustomerRepository.java
│   │       │   └── UserLoginRepository.java
│   │       └── service/
│   │           ├── BankService.java
│   │           └── exception/
│   │               ├── InsufficientBalanceException.java
│   │               ├── LoginFailedException.java
│   │               └── UserNotFoundException.java
│   └── resources/
│       ├── application.properties
└── pom.xml
Step 2: Code Files
1. BankApplication.java
java
Copy
Edit
package com.example.bank;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BankApplication {
    public static void main(String[] args) {
        SpringApplication.run(BankApplication.class, args);
    }
}
2. application.properties
properties
Copy
Edit
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
Update your_username and your_password with your actual Oracle DB credentials.

3. controller/BankController.java
java
Copy
Edit
package com.example.bank.controller;

import com.example.bank.dto.*;
import com.example.bank.service.BankService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class BankController {

    private final BankService bankService;

    @PostMapping("/login")
    public ResponseEntity<Long> login(@RequestBody LoginRequest request) {
        return ResponseEntity.ok(bankService.login(request));
    }

    @PostMapping("/customers")
    public ResponseEntity<String> createCustomer(@RequestBody CreateCustomerRequest request) {
        bankService.createCustomer(request);
        return ResponseEntity.ok("Customer created successfully");
    }

    @GetMapping("/customers/{customerId}")
    public ResponseEntity<CustomerInfoResponse> getCustomerInfo(@PathVariable Long customerId) {
        return ResponseEntity.ok(bankService.getCustomerInfo(customerId));
    }

    @PostMapping("/transactions/deposit")
    public ResponseEntity<String> deposit(@RequestBody TransactionRequest request) {
        bankService.deposit(request);
        return ResponseEntity.ok("Amount deposited successfully");
    }

    @PostMapping("/transactions/withdraw")
    public ResponseEntity<String> withdraw(@RequestBody TransactionRequest request) {
        bankService.withdraw(request);
        return ResponseEntity.ok("Amount withdrawn successfully");
    }

    @GetMapping("/balance/{customerId}")
    public ResponseEntity<BalanceResponse> getBalance(@PathVariable Long customerId) {
        return ResponseEntity.ok(bankService.viewBalance(customerId));
    }

    @GetMapping("/transactions/{customerId}")
    public ResponseEntity<List<BankTransactionResponse>> getTransactionHistory(@PathVariable Long customerId) {
        return ResponseEntity.ok(bankService.getTransactionHistory(customerId));
    }
}
4. service/BankService.java
java
Copy
Edit
package com.example.bank.service;

import com.example.bank.dto.*;
import com.example.bank.entity.*;
import com.example.bank.repository.*;
import com.example.bank.exception.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class BankService {

    @Autowired
    private CustomerRepository customerRepository;
    @Autowired
    private AccountBalanceRepository accountBalanceRepository;
    @Autowired
    private BankTransactionRepository bankTransactionRepository;
    @Autowired
    private UserLoginRepository userLoginRepository;
    @Autowired
    private AccountTypeRepository accountTypeRepository;

    @Transactional
    public Long login(LoginRequest request) {
        UserLogin userLogin = userLoginRepository.findByUsernameAndPassword(request.getUsername(), request.getPassword())
                .orElseThrow(() -> new LoginFailedException("Login failed"));

        return userLogin.getLoginId();
    }

    @Transactional
    public void createCustomer(CreateCustomerRequest request) {
        AccountType accountType = accountTypeRepository.findById(request.getAccountTypeId()).orElseThrow(() -> new RuntimeException("Account type not found"));
        UserLogin userLogin = userLoginRepository.findById(request.getLoginId()).orElseThrow(() -> new RuntimeException("Login ID not found"));

        Customer customer = new Customer();
        customer.setName(request.getName());
        customer.setEmail(request.getEmail());
        customer.setPhone(request.getPhone());
        customer.setAddress(request.getAddress());
        customer.setDob(request.getDob());
        customer.setAccountType(accountType);
        customer.setUserLogin(userLogin);

        customerRepository.save(customer);

        AccountBalance balance = new AccountBalance();
        balance.setCustomer(customer);
        balance.setBalance(0.0); // Starting balance is 0
        accountBalanceRepository.save(balance);
    }

    @Transactional
    public CustomerInfoResponse getCustomerInfo(Long customerId) {
        Customer customer = customerRepository.findById(customerId).orElseThrow(() -> new UserNotFoundException("Customer not found"));

        CustomerInfoResponse response = new CustomerInfoResponse();
        response.setName(customer.getName());
        response.setEmail(customer.getEmail());
        response.setPhone(customer.getPhone());
        response.setAddress(customer.getAddress());
        response.setDob(customer.getDob());
        response.setAccountType(customer.getAccountType().getAccountType());
        return response;
    }

    @Transactional
    public void deposit(TransactionRequest request) {
        Customer customer = customerRepository.findById(request.getCustomerId()).orElseThrow(() -> new UserNotFoundException("Customer not found"));
        AccountBalance balance = accountBalanceRepository.findByCustomer_CustomerId(request.getCustomerId());
        if (balance == null) {
            throw new RuntimeException("Balance not found");
        }

        balance.setBalance(balance.getBalance() + request.getAmount());
        accountBalanceRepository.save(balance);

        BankTransaction transaction = new BankTransaction();
        transaction.setCustomer(customer);
        transaction.setTransactionType("DEPOSIT");
        transaction.setAmount(request.getAmount());
        bankTransactionRepository.save(transaction);
    }

    @Transactional
    public void withdraw(TransactionRequest request) {
        Customer customer = customerRepository.findById(request.getCustomerId()).orElseThrow(() -> new UserNotFoundException("Customer not found"));
        AccountBalance balance = accountBalanceRepository.findByCustomer_CustomerId(request.getCustomerId());
        if (balance == null || balance.getBalance() < request.getAmount()) {
            throw new InsufficientBalanceException("Insufficient balance");
        }

        balance.setBalance(balance.getBalance() - request.getAmount());
        accountBalanceRepository.save(balance);

        BankTransaction transaction = new BankTransaction();
        transaction.setCustomer(customer);
        transaction.setTransactionType("WITHDRAW");
        transaction.setAmount(request.getAmount());
        bankTransactionRepository.save(transaction);
    }

    @Transactional
    public BalanceResponse viewBalance(Long customerId) {
        AccountBalance balance = accountBalanceRepository.findByCustomer_CustomerId(customerId);
        if (balance == null) {
            throw new UserNotFoundException("Customer not found");
        }

        BalanceResponse response = new BalanceResponse();
        response.setName(balance.getCustomer().getName());
        response.setBalance(balance.getBalance());
        return response;
    }

    @Transactional
    public List<BankTransactionResponse> getTransactionHistory(Long customerId) {
        List<BankTransaction> transactions = bankTransactionRepository.findByCustomer_CustomerId(customerId);
        return transactions.stream().map(transaction -> {
            BankTransactionResponse response = new BankTransactionResponse();
            response.setTransactionType(transaction.getTransactionType());
            response.setAmount(transaction.getAmount());
            response.setTransactionDate(transaction.getTransactionDate());
            return response;
        }).collect(Collectors.toList());
    }
}
5. repository Files (Repositories for Each Entity)
CustomerRepository.java
java
Copy
Edit
package com.example.bank.repository;

import com.example.bank.entity.Customer;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CustomerRepository extends JpaRepository<Customer, Long> {
}
AccountBalanceRepository.java
java
Copy
Edit
package com.example.bank.repository;

import com.example.bank.entity.AccountBalance;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AccountBalanceRepository extends JpaRepository<AccountBalance, Long> {
    AccountBalance findByCustomer_CustomerId(Long customerId);
}
BankTransactionRepository.java
java
Copy
Edit
package com.example.bank.repository;

import com.example.bank.entity.BankTransaction;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface BankTransactionRepository extends JpaRepository<BankTransaction, Long> {
    List<BankTransaction> findByCustomer_CustomerId(Long customerId);
}
AccountTypeRepository.java
java
Copy
Edit
package com.example.bank.repository;

import com.example.bank.entity.AccountType;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AccountTypeRepository extends JpaRepository<AccountType, Long> {
}
UserLoginRepository.java
java
Copy
Edit
package com.example.bank.repository;

import com.example.bank.entity.UserLogin;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserLoginRepository extends JpaRepository<UserLogin, Long> {
    Optional<UserLogin> findByUsernameAndPassword(String username, String password);
}
Step 3: Testing API in Postman
Postman Test URLs
1. Login User

POST: http://localhost:8080/api/login

Body:

json
Copy
Edit
{
  "username": "user1",
  "password": "password1"
}
2. Create Customer

POST: http://localhost:8080/api/customers

Body:

json
Copy
Edit
{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "phone": "1234567890",
  "address": "123 Main St",
  "dob": "1990-01-01",
  "accountTypeId": 1,
  "loginId": 1
}
3. Get Customer Info

GET: http://localhost:8080/api/customers/{customerId}

4. Deposit Money

POST: http://localhost:8080/api/transactions/deposit

Body:

json
Copy
Edit
{
  "customerId": 1,
  "amount": 500
}
5. Withdraw Money

POST: http://localhost:8080/api/transactions/withdraw

Body:

json
Copy
Edit
{
  "customerId": 1,
  "amount": 100
}
6. View Account Balance

GET: http://localhost:8080/api/balance/{customerId}

7. Get Transaction History

GET: http://localhost:8080/api/transactions/{customerId}
