



1. INTERN_USER_LOGIN

CREATE TABLE INTERN_USER_LOGIN (
    LOGIN_ID NUMBER PRIMARY KEY,
    USERNAME VARCHAR2(50) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(50) NOT NULL
);



2. INTERN_CUSTOMER

CREATE TABLE INTERN_CUSTOMER (
    CUSTOMER_ID NUMBER PRIMARY KEY,
    LOGIN_ID NUMBER UNIQUE,
    NAME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL,
    PHONE VARCHAR2(15),
    ADDRESS VARCHAR2(200),
    DOB DATE,
    FOREIGN KEY (LOGIN_ID) REFERENCES INTERN_USER_LOGIN(LOGIN_ID)
    
);



3. INTERN_ACCOUNT_TYPE

CREATE TABLE INTERN_ACCOUNT_TYPE (
    ACCOUNT_TYPE_ID NUMBER PRIMARY KEY,
    ACCOUNT_TYPE VARCHAR2(50) NOT NULL,
    ACCOUNT_DESC VARCHAR2(100),
    ACCOUNT_TYPE_CODE VARCHAR2(10)
);
INSERT INTO INTERN_ACCOUNT_TYPE (ACCOUNT_TYPE_ID, ACCOUNT_TYPE, ACCOUNT_DESC, ACCOUNT_TYPE_CODE, ACCOUNT_TYPE_COUNTER)
VALUES (1, 'SAVINGS', 'Savings Account', 'SB');

INSERT INTO INTERN_ACCOUNT_TYPE (ACCOUNT_TYPE_ID, ACCOUNT_TYPE, ACCOUNT_DESC, ACCOUNT_TYPE_CODE, ACCOUNT_TYPE_COUNTER)
VALUES (2, 'CURRENT', 'Current Account', 'CA');





3. INTERN_ACCOUNT

CREATE TABLE INTERN_ACCOUNT (
    ACCOUNT_NUMBER NUMBER PRIMARY KEY,
    CUSTOMER_ID NUMBER NOT NULL,
    ACCOUNT_TYPE_ID NUMBER NOT NULL,
    BALANCE NUMBER(15, 2) DEFAULT 0.00,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES INTERN_CUSTOMER(CUSTOMER_ID),
    FOREIGN KEY (ACCOUNT_TYPE_ID) REFERENCES INTERN_ACCOUNT_TYPE(ACCOUNT_TYPE_ID)
);


4. INTERN_BANK_TRANSACTION

CREATE TABLE INTERN_BANK_TRANSACTION (
    TRANSACTION_ID NUMBER PRIMARY KEY,
    ACCOUNT_NUMBER NUMBER NOT NULL,
    TRANSACTION_TYPE VARCHAR2(10),
    AMOUNT NUMBER(15, 2),
    TRANSACTION_DATE DATE,
    REFERENCE_NO VARCHAR2(20),
    FOREIGN KEY (ACCOUNT_NUMBER) REFERENCES INTERN_ACCOUNT(ACCOUNT_NUMBER)
);




3. Model Classes
UserLogin.java
java
package com.oracle.bankapp.model;

import javax.persistence.*;

@Entity
@Table(name = "INTERN_USER_LOGIN")
public class UserLogin {
    
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column(name = "LOGIN_ID")
    private Long loginId;
    
    @Column(name = "USERNAME", unique = true, nullable = false)
    private String username;
    
    @Column(name = "PASSWORD", nullable = false)
    private String password;
    
    // Getters and Setters
    public Long getLoginId() {
        return loginId;
    }
    
    public void setLoginId(Long loginId) {
        this.loginId = loginId;
    }
    
    public String getUsername() {
        return username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    
    public String getPassword() {
        return password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
}
Customer.java
java
package com.oracle.bankapp.model;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "INTERN_CUSTOMER")
public class Customer {
    
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column(name = "CUSTOMER_ID")
    private Long customerId;
    
    @OneToOne
    @JoinColumn(name = "LOGIN_ID", referencedColumnName = "LOGIN_ID")
    private UserLogin userLogin;
    
    @Column(name = "NAME", nullable = false)
    private String name;
    
    @Column(name = "EMAIL", nullable = false)
    private String email;
    
    @Column(name = "PHONE")
    private String phone;
    
    @Column(name = "ADDRESS")
    private String address;
    
    @Column(name = "DOB")
    @Temporal(TemporalType.DATE)
    private Date dob;
    
    // Getters and Setters
    public Long getCustomerId() {
        return customerId;
    }
    
    public void setCustomerId(Long customerId) {
        this.customerId = customerId;
    }
    
    public UserLogin getUserLogin() {
        return userLogin;
    }
    
    public void setUserLogin(UserLogin userLogin) {
        this.userLogin = userLogin;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getEmail() {
        return email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }
    
    public String getPhone() {
        return phone;
    }
    
    public void setPhone(String phone) {
        this.phone = phone;
    }
    
    public String getAddress() {
        return address;
    }
    
    public void setAddress(String address) {
        this.address = address;
    }
    
    public Date getDob() {
        return dob;
    }
    
    public void setDob(Date dob) {
        this.dob = dob;
    }
}
AccountType.java
java
package com.oracle.bankapp.model;

import javax.persistence.*;

@Entity
@Table(name = "INTERN_ACCOUNT_TYPE")
public class AccountType {
    
    @Id
    @Column(name = "ACCOUNT_TYPE_ID")
    private Long accountTypeId;
    
    @Column(name = "ACCOUNT_TYPE", nullable = false)
    private String accountType;
    
    @Column(name = "ACCOUNT_DESC")
    private String accountDesc;
    
    @Column(name = "ACCOUNT_TYPE_CODE")
    private String accountTypeCode;
    
    // Getters and Setters
    public Long getAccountTypeId() {
        return accountTypeId;
    }
    
    public void setAccountTypeId(Long accountTypeId) {
        this.accountTypeId = accountTypeId;
    }
    
    public String getAccountType() {
        return accountType;
    }
    
    public void setAccountType(String accountType) {
        this.accountType = accountType;
    }
    
    public String getAccountDesc() {
        return accountDesc;
    }
    
    public void setAccountDesc(String accountDesc) {
        this.accountDesc = accountDesc;
    }
    
    public String getAccountTypeCode() {
        return accountTypeCode;
    }
    
    public void setAccountTypeCode(String accountTypeCode) {
        this.accountTypeCode = accountTypeCode;
    }
}
Account.java
java
package com.oracle.bankapp.model;

import javax.persistence.*;
import java.math.BigDecimal;

@Entity
@Table(name = "INTERN_ACCOUNT")
public class Account {
    
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column(name = "ACCOUNT_NUMBER")
    private Long accountNumber;
    
    @ManyToOne
    @JoinColumn(name = "CUSTOMER_ID", nullable = false)
    private Customer customer;
    
    @ManyToOne
    @JoinColumn(name = "ACCOUNT_TYPE_ID", nullable = false)
    private AccountType accountType;
    
    @Column(name = "BALANCE", columnDefinition = "NUMBER(15,2) default 0.00")
    private BigDecimal balance;
    
    // Getters and Setters
    public Long getaccountNumber() {
        return accountNumber;
    }
    
    public void setaccountNumber(Long accountNumber) {
        this.accountNumber = accountNumber;
    }
    
    public Customer getCustomer() {
        return customer;
    }
    
    public void setCustomer(Customer customer) {
        this.customer = customer;
    }
    
    public AccountType getAccountType() {
        return accountType;
    }
    
    public void setAccountType(AccountType accountType) {
        this.accountType = accountType;
    }
    
    public BigDecimal getBalance() {
        return balance;
    }
    
    public void setBalance(BigDecimal balance) {
        this.balance = balance;
    }
}
BankTransaction.java
java
package com.oracle.bankapp.model;

import javax.persistence.*;
import java.math.BigDecimal;
import java.util.Date;

@Entity
@Table(name = "INTERN_BANK_TRANSACTION")
public class BankTransaction {
    
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column(name = "TRANSACTION_ID")
    private Long transactionId;
    
    @ManyToOne
    @JoinColumn(name = "ACCOUNT_NUMBER", nullable = false)
    private Account account;
    
    @Column(name = "TRANSACTION_TYPE")
    private String transactionType;
    
    @Column(name = "AMOUNT")
    private BigDecimal amount;
    
    @Column(name = "TRANSACTION_DATE")
    @Temporal(TemporalType.DATE)
    private Date transactionDate;
    
    @Column(name = "REFERENCE_NO")
    private String referenceNo;
    
    // Getters and Setters
    public Long getTransactionId() {
        return transactionId;
    }
    
    public void setTransactionId(Long transactionId) {
        this.transactionId = transactionId;
    }
    
    public Account getAccount() {
        return account;
    }
    
    public void setAccount(Account account) {
        this.account = account;
    }
    
    public String getTransactionType() {
        return transactionType;
    }
    
    public void setTransactionType(String transactionType) {
        this.transactionType = transactionType;
    }
    
    public BigDecimal getAmount() {
        return amount;
    }
    
    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }
    
    public Date getTransactionDate() {
        return transactionDate;
    }
    
    public void setTransactionDate(Date transactionDate) {
        this.transactionDate = transactionDate;
    }
    
    public String getReferenceNo() {
        return referenceNo;
    }
    
    public void setReferenceNo(String referenceNo) {
        this.referenceNo = referenceNo;
    }
}
4. Repository Interfaces
UserLoginRepository.java
java
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.UserLogin;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserLoginRepository extends JpaRepository<UserLogin, Long> {
    UserLogin findByUsername(String username);
}
CustomerRepository.java
java
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.Customer;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CustomerRepository extends JpaRepository<Customer, Long> {
    Customer findByUserLogin_LoginId(Long loginId);
}
AccountRepository.java
java
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.Account;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface AccountRepository extends JpaRepository<Account, Long> {
    List<Account> findByCustomer_CustomerId(Long customerId);
}
BankTransactionRepository.java
java
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.BankTransaction;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface BankTransactionRepository extends JpaRepository<BankTransaction, Long> {
    List<BankTransaction> findByAccount_accountNumber(Long accountNumber);
}
5. Service Layer
BankService.java
java
package com.oracle.bankapp.service;

import com.oracle.bankapp.model.*;
import com.oracle.bankapp.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Random;

@Service
public class BankService {
    
    @Autowired
    private UserLoginRepository userLoginRepository;
    
    @Autowired
    private CustomerRepository customerRepository;
    
    @Autowired
    private AccountRepository accountRepository;
    
    @Autowired
    private BankTransactionRepository transactionRepository;
    
    @Autowired
    private AccountTypeRepository accountTypeRepository;
    
    // User Registration
    @Transactional
    public UserLogin registerUser(String username, String password) {
        UserLogin user = new UserLogin();
        user.setUsername(username);
        user.setPassword(password); // In production, encrypt the password
        return userLoginRepository.save(user);
    }
    
    // User Login
    public UserLogin loginUser(String username, String password) {
        UserLogin user = userLoginRepository.findByUsername(username);
        if (user != null && user.getPassword().equals(password)) {
            return user;
        }
        return null;
    }
    
    // Create Customer
    @Transactional
    public Customer createCustomer(Long loginId, String name, String email, String phone, String address, Date dob) {
        UserLogin user = userLoginRepository.findById(loginId).orElse(null);
        if (user == null) {
            return null;
        }
        
        Customer customer = new Customer();
        customer.setUserLogin(user);
        customer.setName(name);
        customer.setEmail(email);
        customer.setPhone(phone);
        customer.setAddress(address);
        customer.setDob(dob);
        
        return customerRepository.save(customer);
    }
    
    // Update Customer Details
    @Transactional
    public Customer updateCustomer(Long customerId, String name, String email, String phone, String address, Date dob) {
        Customer customer = customerRepository.findById(customerId).orElse(null);
        if (customer == null) {
            return null;
        }
        
        customer.setName(name);
        customer.setEmail(email);
        customer.setPhone(phone);
        customer.setAddress(address);
        customer.setDob(dob);
        
        return customerRepository.save(customer);
    }
    
    // View Customer Info
    public Customer getCustomerInfo(Long customerId) {
        return customerRepository.findById(customerId).orElse(null);
    }
    
    // Create Account
    @Transactional
    public Account createAccount(Long customerId, Long accountTypeId) {
        Customer customer = customerRepository.findById(customerId).orElse(null);
        AccountType accountType = accountTypeRepository.findById(accountTypeId).orElse(null);
        
        if (customer == null || accountType == null) {
            return null;
        }
        
        Account account = new Account();
        account.setCustomer(customer);
        account.setAccountType(accountType);
        account.setBalance(BigDecimal.ZERO);
        
        return accountRepository.save(account);
    }
    
    // Deposit Money
    @Transactional
    public Account deposit(Long accountNumber, BigDecimal amount) {
        Account account = accountRepository.findById(accountNumber).orElse(null);
        if (account == null) {
            return null;
        }
        
        account.setBalance(account.getBalance().add(amount));
        accountRepository.save(account);
        
        // Create transaction record
        BankTransaction transaction = new BankTransaction();
        transaction.setAccount(account);
        transaction.setTransactionType("DEPOSIT");
        transaction.setAmount(amount);
        transaction.setTransactionDate(new Date());
        transaction.setReferenceNo(generateReferenceNo("DEP"));
        transactionRepository.save(transaction);
        
        return account;
    }
    
    // Withdraw Money
    @Transactional
    public Account withdraw(Long accountNumber, BigDecimal amount) {
        Account account = accountRepository.findById(accountNumber).orElse(null);
        if (account == null || account.getBalance().compareTo(amount) < 0) {
            return null;
        }
        
        account.setBalance(account.getBalance().subtract(amount));
        accountRepository.save(account);
        
        // Create transaction record
        BankTransaction transaction = new BankTransaction();
        transaction.setAccount(account);
        transaction.setTransactionType("WITHDRAW");
        transaction.setAmount(amount);
        transaction.setTransactionDate(new Date());
        transaction.setReferenceNo(generateReferenceNo("WITH"));
        transactionRepository.save(transaction);
        
        return account;
    }
    
    // View Balance
    public BigDecimal getBalance(Long accountNumber) {
        Account account = accountRepository.findById(accountNumber).orElse(null);
        return account != null ? account.getBalance() : null;
    }
    
    // View Transaction History
    public List<BankTransaction> getTransactionHistory(Long accountNumber) {
        return transactionRepository.findByAccount_accountNumber(accountNumber);
    }
    
    // Helper method to generate reference number
    private String generateReferenceNo(String prefix) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
        String timestamp = sdf.format(new Date());
        Random random = new Random();
        int randomNum = random.nextInt(9000) + 1000; // 4-digit random number
        return prefix + timestamp + randomNum;
    }
}
6. Controller Layer
BankController.java
java
package com.oracle.bankapp.controller;

import com.oracle.bankapp.model.*;
import com.oracle.bankapp.service.BankService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

@RestController
@RequestMapping("/api/bank")
public class BankController {
    
    @Autowired
    private BankService bankService;
    
    // User Registration
    @PostMapping("/register")
    public ResponseEntity<UserLogin> registerUser(
            @RequestParam String username,
            @RequestParam String password) {
        UserLogin user = bankService.registerUser(username, password);
        return user != null ? ResponseEntity.ok(user) : ResponseEntity.badRequest().build();
    }
    
    // User Login
    @PostMapping("/login")
    public ResponseEntity<UserLogin> loginUser(
            @RequestParam String username,
            @RequestParam String password) {
        UserLogin user = bankService.loginUser(username, password);
        return user != null ? ResponseEntity.ok(user) : ResponseEntity.badRequest().build();
    }
    
    // Create Customer
    @PostMapping("/customer")
    public ResponseEntity<Customer> createCustomer(
            @RequestParam Long loginId,
            @RequestParam String name,
            @RequestParam String email,
            @RequestParam(required = false) String phone,
            @RequestParam(required = false) String address,
            @RequestParam(required = false) Date dob) {
        Customer customer = bankService.createCustomer(loginId, name, email, phone, address, dob);
        return customer != null ? ResponseEntity.ok(customer) : ResponseEntity.badRequest().build();
    }
    
    // Update Customer Details
    @PutMapping("/customer/{customerId}")
    public ResponseEntity<Customer> updateCustomer(
            @PathVariable Long customerId,
            @RequestParam String name,
            @RequestParam String email,
            @RequestParam(required = false) String phone,
            @RequestParam(required = false) String address,
            @RequestParam(required = false) Date dob) {
        Customer customer = bankService.updateCustomer(customerId, name, email, phone, address, dob);
        return customer != null ? ResponseEntity.ok(customer) : ResponseEntity.badRequest().build();
    }
    
    // View Customer Info
    @GetMapping("/customer/{customerId}")
    public ResponseEntity<Customer> getCustomerInfo(@PathVariable Long customerId) {
        Customer customer = bankService.getCustomerInfo(customerId);
        return customer != null ? ResponseEntity.ok(customer) : ResponseEntity.notFound().build();
    }
    
    // Create Account
    @PostMapping("/account")
    public ResponseEntity<Account> createAccount(
            @RequestParam Long customerId,
            @RequestParam Long accountTypeId) {
        Account account = bankService.createAccount(customerId, accountTypeId);
        return account != null ? ResponseEntity.ok(account) : ResponseEntity.badRequest().build();
    }
    
    // Deposit Money
    @PostMapping("/account/{accountNumber}/deposit")
    public ResponseEntity<Account> deposit(
            @PathVariable Long ,
            @RequestParam BigDecimal amount) {
        Account account = bankService.deposit(accountNumber, amount);
        return account != null ? ResponseEntity.ok(account) : ResponseEntity.badRequest().build();
    }
    
    // Withdraw Money
    @PostMapping("/account/{accountNumber}/withdraw")
    public ResponseEntity<Account> withdraw(
            @PathVariable Long accountNumber,
            @RequestParam BigDecimal amount) {
        Account account = bankService.withdraw(accountNumber, amount);
        return account != null ? ResponseEntity.ok(account) : ResponseEntity.badRequest().build();
    }
    
    // View Balance
    @GetMapping("/account/{accountNumber}/balance")
    public ResponseEntity<BigDecimal> getBalance(@PathVariable Long accountNumber) {
        BigDecimal balance = bankService.getBalance(accountNumber);
        return balance != null ? ResponseEntity.ok(balance) : ResponseEntity.notFound().build();
    }
    
    // View Transaction History
    @GetMapping("/account/{accountNumber}/transactions")
    public ResponseEntity<List<BankTransaction>> getTransactionHistory(@PathVariable Long accountNumber) {
        List<BankTransaction> transactions = bankService.getTransactionHistory(accountNumber);
        return ResponseEntity.ok(transactions);
    }
}
7. Main Application Class
BankApplication.java
java
package com.oracle.bankapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BankApplication {
    public static void main(String[] args) {
        SpringApplication.run(BankApplication.class, args);
    }
}
Testing with Postman
Here are some sample requests you can test in Postman:

User Registration

Method: POST

URL: http://localhost:8080/api/bank/register

Params: username, password

User Login

Method: POST

URL: http://localhost:8080/api/bank/login

Params: username, password

Create Customer

Method: POST

URL: http://localhost:8080/api/bank/customer

Params: loginId, name, email, phone, address, dob

Create Account

Method: POST

URL: http://localhost:8080/api/bank/account

Params: customerId, accountTypeId (1 for Savings, 2 for Current)

Deposit Money

Method: POST

URL: http://localhost:8080/api/bank/account/{accountNumber}/deposit

Params: amount

Withdraw Money

Method: POST

URL: http://localhost:8080/api/bank/account/{accountNumber}/withdraw

Params: amount

View Balance

Method: GET

URL: http://localhost:8080/api/bank/account/{accountNumber}/balance

View Transaction History

Method: GET

URL: http://localhost:8080/api/bank/account/{accountNumber}/transactions
























✅ Folder Structure Recap
css
Copy
Edit
src/
└── main/
    └── java/
        └── com/
            └── oracle/
                └── bankapp/
                    ├── BankApplication.java
                    ├── model/
                    │   ├── UserLogin.java
                    │   ├── Customer.java
                    │   ├── AccountBalance.java
                    │   └── BankTransaction.java
                    ├── repository/
                    │   ├── UserLoginRepository.java
                    │   ├── CustomerRepository.java
                    │   ├── AccountBalanceRepository.java
                    │   └── BankTransactionRepository.java
                    ├── service/
                    │   └── BankService.java
                    └── controller/
                        └── BankController.java
    └── resources/
        └── application.properties


// BankApplication.java
package com.oracle.bankapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BankApplication {
    public static void main(String[] args) {
        SpringApplication.run(BankApplication.class, args);
    }
}

// pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.oracle</groupId>
    <artifactId>bankapp</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <properties>
        <java.version>1.8</java.version>
        <spring-boot.version>2.7.10</spring-boot.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc7</artifactId>
            <version>12.1.0.2</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

// application.properties
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_oracle_username
spring.datasource.password=your_oracle_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true

// Directory structure:
// com/oracle/bankapp/model/
// com/oracle/bankapp/repository/
// com/oracle/bankapp/service/
// com/oracle/bankapp/controller/

// --- Entity Classes ---

// UserLogin.java
package com.oracle.bankapp.model;

import javax.persistence.*;

@Entity
@Table(name = "INTERN_USER_LOGIN")
public class UserLogin {
    @Id
    @Column(name = "LOGIN_ID")
    private Long loginId;

    @Column(name = "USERNAME", unique = true, nullable = false)
    private String username;

    @Column(name = "PASSWORD", nullable = false)
    private String password;

    public Long getLoginId() { return loginId; }
    public void setLoginId(Long loginId) { this.loginId = loginId; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
}

// Customer.java
package com.oracle.bankapp.model;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "INTERN_CUSTOMER")
public class Customer {
    @Id
    @Column(name = "CUSTOMER_ID")
    private Long customerId;

    @Column(name = "LOGIN_ID", unique = true)
    private Long loginId;

    @Column(name = "NAME", nullable = false)
    private String name;

    @Column(name = "EMAIL", nullable = false)
    private String email;

    @Column(name = "PHONE")
    private String phone;

    @Column(name = "ADDRESS")
    private String address;

    @Column(name = "DOB")
    private Date dob;

    @Column(name = "ACCOUNT_TYPE_ID", nullable = false)
    private Long accountTypeId;

    public Long getCustomerId() { return customerId; }
    public void setCustomerId(Long customerId) { this.customerId = customerId; }

    public Long getLoginId() { return loginId; }
    public void setLoginId(Long loginId) { this.loginId = loginId; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public Date getDob() { return dob; }
    public void setDob(Date dob) { this.dob = dob; }

    public Long getAccountTypeId() { return accountTypeId; }
    public void setAccountTypeId(Long accountTypeId) { this.accountTypeId = accountTypeId; }
}

// AccountBalance.java
package com.oracle.bankapp.model;

import javax.persistence.*;

@Entity
@Table(name = "INTERN_ACCOUNT_BALANCE")
public class AccountBalance {
    @Id
    @Column(name = "BALANCE_ID")
    private Long balanceId;

    @Column(name = "CUSTOMER_ID", nullable = false)
    private Long customerId;

    @Column(name = "BALANCE")
    private Double balance;

    public AccountBalance() {}

    public AccountBalance(Long balanceId, Long customerId, Double balance) {
        this.balanceId = balanceId;
        this.customerId = customerId;
        this.balance = balance;
    }

    public Long getBalanceId() { return balanceId; }
    public void setBalanceId(Long balanceId) { this.balanceId = balanceId; }

    public Long getCustomerId() { return customerId; }
    public void setCustomerId(Long customerId) { this.customerId = customerId; }

    public Double getBalance() { return balance; }
    public void setBalance(Double balance) { this.balance = balance; }
}

// BankTransaction.java
package com.oracle.bankapp.model;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "INTERN_BANK_TRANSACTION")
public class BankTransaction {
    @Id
    @Column(name = "TRANSACTION_ID")
    private Long transactionId;

    @Column(name = "CUSTOMER_ID", nullable = false)
    private Long customerId;

    @Column(name = "TRANSACTION_TYPE")
    private String transactionType;

    @Column(name = "AMOUNT")
    private Double amount;

    @Column(name = "TRANSACTION_DATE")
    private Date transactionDate;

    public BankTransaction() {}

    public BankTransaction(Long transactionId, Long customerId, String transactionType, Double amount, Date transactionDate) {
        this.transactionId = transactionId;
        this.customerId = customerId;
        this.transactionType = transactionType;
        this.amount = amount;
        this.transactionDate = transactionDate;
    }

    public Long getTransactionId() { return transactionId; }
    public void setTransactionId(Long transactionId) { this.transactionId = transactionId; }

    public Long getCustomerId() { return customerId; }
    public void setCustomerId(Long customerId) { this.customerId = customerId; }

    public String getTransactionType() { return transactionType; }
    public void setTransactionType(String transactionType) { this.transactionType = transactionType; }

    public Double getAmount() { return amount; }
    public void setAmount(Double amount) { this.amount = amount; }

    public Date getTransactionDate() { return transactionDate; }
    public void setTransactionDate(Date transactionDate) { this.transactionDate = transactionDate; }
}


✅ File: repository/UserLoginRepository.java
java
Copy
Edit
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.UserLogin;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserLoginRepository extends JpaRepository<UserLogin, Long> {
    Optional<UserLogin> findByUsernameAndPassword(String username, String password);
}
✅ File: repository/CustomerRepository.java
java
Copy
Edit
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.Customer;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CustomerRepository extends JpaRepository<Customer, Long> {
    Customer findByLoginId(Long loginId);
}
✅ File: repository/AccountBalanceRepository.java
java
Copy
Edit
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.AccountBalance;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AccountBalanceRepository extends JpaRepository<AccountBalance, Long> {
    AccountBalance findByCustomerId(Long customerId);
}
✅ File: repository/BankTransactionRepository.java
java
Copy
Edit
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.BankTransaction;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface BankTransactionRepository extends JpaRepository<BankTransaction, Long> {
    List<BankTransaction> findByCustomerIdOrderByTransactionDateDesc(Long customerId);
}
💼 Services
✅ File: service/BankService.java
java
Copy
Edit
package com.oracle.bankapp.service;

import com.oracle.bankapp.model.*;
import com.oracle.bankapp.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

@Service
public class BankService {

    @Autowired
    private UserLoginRepository userLoginRepository;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private AccountBalanceRepository balanceRepository;

    @Autowired
    private BankTransactionRepository transactionRepository;

    public boolean login(String username, String password) {
        return userLoginRepository.findByUsernameAndPassword(username, password).isPresent();
    }

    public void registerUser(UserLogin userLogin) {
        userLoginRepository.save(userLogin);
    }

    public void createCustomer(Customer customer) {
        customerRepository.save(customer);
        balanceRepository.save(new AccountBalance(customer.getCustomerId(), customer.getCustomerId(), 0.0));
    }

    public Customer viewCustomer(Long customerId) {
        return customerRepository.findById(customerId).orElse(null);
    }

    public AccountBalance viewBalance(Long customerId) {
        return balanceRepository.findByCustomerId(customerId);
    }

    public void deposit(Long customerId, Double amount) {
        AccountBalance balance = balanceRepository.findByCustomerId(customerId);
        balance.setBalance(balance.getBalance() + amount);
        balanceRepository.save(balance);
        transactionRepository.save(new BankTransaction(null, customerId, "DEPOSIT", amount, new Date()));
    }

    public void withdraw(Long customerId, Double amount) throws Exception {
        AccountBalance balance = balanceRepository.findByCustomerId(customerId);
        if (balance.getBalance() < amount) {
            throw new Exception("Insufficient balance");
        }
        balance.setBalance(balance.getBalance() - amount);
        balanceRepository.save(balance);
        transactionRepository.save(new BankTransaction(null, customerId, "WITHDRAW", amount, new Date()));
    }

    public List<BankTransaction> getTransactionHistory(Long customerId) {
        return transactionRepository.findByCustomerIdOrderByTransactionDateDesc(customerId);
    }
}
🌐 Controllers
✅ File: controller/BankController.java
java
Copy
Edit
package com.oracle.bankapp.controller;

import com.oracle.bankapp.model.*;
import com.oracle.bankapp.service.BankService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/bank")
public class BankController {

    @Autowired
    private BankService bankService;

    @PostMapping("/login")
    public String login(@RequestParam String username, @RequestParam String password) {
        boolean success = bankService.login(username, password);
        return success ? "Login successful" : "Invalid credentials";
    }

    @PostMapping("/register")
    public String registerUser(@RequestBody UserLogin userLogin) {
        bankService.registerUser(userLogin);
        return "User registered successfully";
    }

    @PostMapping("/createCustomer")
    public String createCustomer(@RequeBody Customer customer) {
        bankService.createCustomer(customer);
        return "Customer created successfully";
    }

    @GetMapping("/customer/{id}")
    public Customer viewCustomer(@PathVariable Long id) {
        return bankService.viewCustomer(id);
    }

    @GetMapping("/balance/{customerId}")
    public AccountBalance viewBalance(@PathVariable Long customerId) {
        return bankService.viewBalance(customerId);
    }

    @PostMapping("/deposit")
    public String deposit(@RequestParam Long customerId, @RequestParam Double amount) {
        bankService.deposit(customerId, amount);
        return "Amount deposited successfully";
    }

    @PostMapping("/withdraw")
    public String withdraw(@RequestParam Long customerId, @RequestParam Double amount) {
        try {
            bankService.withdraw(customerId, amount);
            return "Amount withdrawn successfully";
        } catch (Exception e) {
            return e.getMessage();
        }
    }

    @GetMapping("/transactions/{customerId}")
    public List<BankTransaction> transactionHistory(@PathVariable Long customerId) {
        return bankService.getTransactionHistory(customerId);
    }
}

pom.xml
