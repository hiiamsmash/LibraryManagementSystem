



1. INTERN_USER_LOGIN

CREATE TABLE INTERN_USER_LOGIN (
    LOGIN_ID NUMBER PRIMARY KEY,
    USERNAME VARCHAR2(50) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(50) NOT NULL
);



2. INTERN_CUSTOMER

CREATE TABLE INTERN_CUSTOMER (
    CUSTOMER_ID NUMBER PRIMARY KEY,
    LOGIN_ID NUMBER UNIQUE,
    NAME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL,
    PHONE VARCHAR2(15),
    ADDRESS VARCHAR2(200),
    DOB DATE,
    FOREIGN KEY (LOGIN_ID) REFERENCES INTERN_USER_LOGIN(LOGIN_ID)
    
);



3. INTERN_ACCOUNT_TYPE

CREATE TABLE INTERN_ACCOUNT_TYPE (
    ACCOUNT_TYPE_ID NUMBER PRIMARY KEY,
    ACCOUNT_TYPE VARCHAR2(50) NOT NULL,
    ACCOUNT_DESC VARCHAR2(100),
    ACCOUNT_TYPE_CODE VARCHAR2(10)
);
INSERT INTO INTERN_ACCOUNT_TYPE (ACCOUNT_TYPE_ID, ACCOUNT_TYPE, ACCOUNT_DESC, ACCOUNT_TYPE_CODE, ACCOUNT_TYPE_COUNTER)
VALUES (1, 'SAVINGS', 'Savings Account', 'SB');

INSERT INTO INTERN_ACCOUNT_TYPE (ACCOUNT_TYPE_ID, ACCOUNT_TYPE, ACCOUNT_DESC, ACCOUNT_TYPE_CODE, ACCOUNT_TYPE_COUNTER)
VALUES (2, 'CURRENT', 'Current Account', 'CA');





3. INTERN_ACCOUNT

CREATE TABLE INTERN_ACCOUNT (
    ACCOUNT_ID NUMBER PRIMARY KEY,
    CUSTOMER_ID NUMBER NOT NULL,
    ACCOUNT_TYPE_ID NUMBER NOT NULL,
    BALANCE NUMBER(15, 2) DEFAULT 0.00,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES INTERN_CUSTOMER(CUSTOMER_ID),
    FOREIGN KEY (ACCOUNT_TYPE_ID) REFERENCES INTERN_ACCOUNT_TYPE(ACCOUNT_TYPE_ID)
);


4. INTERN_BANK_TRANSACTION

CREATE TABLE INTERN_BANK_TRANSACTION (
    TRANSACTION_ID NUMBER PRIMARY KEY,
    ACCOUNT_ID NUMBER NOT NULL,
    TRANSACTION_TYPE VARCHAR2(10),
    AMOUNT NUMBER(15, 2),
    TRANSACTION_DATE DATE,
    REFERENCE_NO VARCHAR2(20),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES INTERN_ACCOUNT(ACCOUNT_ID)
);

















✅ Folder Structure Recap
css
Copy
Edit
src/
└── main/
    └── java/
        └── com/
            └── oracle/
                └── bankapp/
                    ├── BankApplication.java
                    ├── model/
                    │   ├── UserLogin.java
                    │   ├── Customer.java
                    │   ├── AccountBalance.java
                    │   └── BankTransaction.java
                    ├── repository/
                    │   ├── UserLoginRepository.java
                    │   ├── CustomerRepository.java
                    │   ├── AccountBalanceRepository.java
                    │   └── BankTransactionRepository.java
                    ├── service/
                    │   └── BankService.java
                    └── controller/
                        └── BankController.java
    └── resources/
        └── application.properties


// BankApplication.java
package com.oracle.bankapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BankApplication {
    public static void main(String[] args) {
        SpringApplication.run(BankApplication.class, args);
    }
}

// pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.oracle</groupId>
    <artifactId>bankapp</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <properties>
        <java.version>1.8</java.version>
        <spring-boot.version>2.7.10</spring-boot.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc7</artifactId>
            <version>12.1.0.2</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

// application.properties
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_oracle_username
spring.datasource.password=your_oracle_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true

// Directory structure:
// com/oracle/bankapp/model/
// com/oracle/bankapp/repository/
// com/oracle/bankapp/service/
// com/oracle/bankapp/controller/

// --- Entity Classes ---

// UserLogin.java
package com.oracle.bankapp.model;

import javax.persistence.*;

@Entity
@Table(name = "INTERN_USER_LOGIN")
public class UserLogin {
    @Id
    @Column(name = "LOGIN_ID")
    private Long loginId;

    @Column(name = "USERNAME", unique = true, nullable = false)
    private String username;

    @Column(name = "PASSWORD", nullable = false)
    private String password;

    public Long getLoginId() { return loginId; }
    public void setLoginId(Long loginId) { this.loginId = loginId; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
}

// Customer.java
package com.oracle.bankapp.model;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "INTERN_CUSTOMER")
public class Customer {
    @Id
    @Column(name = "CUSTOMER_ID")
    private Long customerId;

    @Column(name = "LOGIN_ID", unique = true)
    private Long loginId;

    @Column(name = "NAME", nullable = false)
    private String name;

    @Column(name = "EMAIL", nullable = false)
    private String email;

    @Column(name = "PHONE")
    private String phone;

    @Column(name = "ADDRESS")
    private String address;

    @Column(name = "DOB")
    private Date dob;

    @Column(name = "ACCOUNT_TYPE_ID", nullable = false)
    private Long accountTypeId;

    public Long getCustomerId() { return customerId; }
    public void setCustomerId(Long customerId) { this.customerId = customerId; }

    public Long getLoginId() { return loginId; }
    public void setLoginId(Long loginId) { this.loginId = loginId; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public Date getDob() { return dob; }
    public void setDob(Date dob) { this.dob = dob; }

    public Long getAccountTypeId() { return accountTypeId; }
    public void setAccountTypeId(Long accountTypeId) { this.accountTypeId = accountTypeId; }
}

// AccountBalance.java
package com.oracle.bankapp.model;

import javax.persistence.*;

@Entity
@Table(name = "INTERN_ACCOUNT_BALANCE")
public class AccountBalance {
    @Id
    @Column(name = "BALANCE_ID")
    private Long balanceId;

    @Column(name = "CUSTOMER_ID", nullable = false)
    private Long customerId;

    @Column(name = "BALANCE")
    private Double balance;

    public AccountBalance() {}

    public AccountBalance(Long balanceId, Long customerId, Double balance) {
        this.balanceId = balanceId;
        this.customerId = customerId;
        this.balance = balance;
    }

    public Long getBalanceId() { return balanceId; }
    public void setBalanceId(Long balanceId) { this.balanceId = balanceId; }

    public Long getCustomerId() { return customerId; }
    public void setCustomerId(Long customerId) { this.customerId = customerId; }

    public Double getBalance() { return balance; }
    public void setBalance(Double balance) { this.balance = balance; }
}

// BankTransaction.java
package com.oracle.bankapp.model;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "INTERN_BANK_TRANSACTION")
public class BankTransaction {
    @Id
    @Column(name = "TRANSACTION_ID")
    private Long transactionId;

    @Column(name = "CUSTOMER_ID", nullable = false)
    private Long customerId;

    @Column(name = "TRANSACTION_TYPE")
    private String transactionType;

    @Column(name = "AMOUNT")
    private Double amount;

    @Column(name = "TRANSACTION_DATE")
    private Date transactionDate;

    public BankTransaction() {}

    public BankTransaction(Long transactionId, Long customerId, String transactionType, Double amount, Date transactionDate) {
        this.transactionId = transactionId;
        this.customerId = customerId;
        this.transactionType = transactionType;
        this.amount = amount;
        this.transactionDate = transactionDate;
    }

    public Long getTransactionId() { return transactionId; }
    public void setTransactionId(Long transactionId) { this.transactionId = transactionId; }

    public Long getCustomerId() { return customerId; }
    public void setCustomerId(Long customerId) { this.customerId = customerId; }

    public String getTransactionType() { return transactionType; }
    public void setTransactionType(String transactionType) { this.transactionType = transactionType; }

    public Double getAmount() { return amount; }
    public void setAmount(Double amount) { this.amount = amount; }

    public Date getTransactionDate() { return transactionDate; }
    public void setTransactionDate(Date transactionDate) { this.transactionDate = transactionDate; }
}


✅ File: repository/UserLoginRepository.java
java
Copy
Edit
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.UserLogin;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserLoginRepository extends JpaRepository<UserLogin, Long> {
    Optional<UserLogin> findByUsernameAndPassword(String username, String password);
}
✅ File: repository/CustomerRepository.java
java
Copy
Edit
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.Customer;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CustomerRepository extends JpaRepository<Customer, Long> {
    Customer findByLoginId(Long loginId);
}
✅ File: repository/AccountBalanceRepository.java
java
Copy
Edit
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.AccountBalance;
import org.springframework.data.jpa.repository.JpaRepository;

public interface AccountBalanceRepository extends JpaRepository<AccountBalance, Long> {
    AccountBalance findByCustomerId(Long customerId);
}
✅ File: repository/BankTransactionRepository.java
java
Copy
Edit
package com.oracle.bankapp.repository;

import com.oracle.bankapp.model.BankTransaction;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface BankTransactionRepository extends JpaRepository<BankTransaction, Long> {
    List<BankTransaction> findByCustomerIdOrderByTransactionDateDesc(Long customerId);
}
💼 Services
✅ File: service/BankService.java
java
Copy
Edit
package com.oracle.bankapp.service;

import com.oracle.bankapp.model.*;
import com.oracle.bankapp.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

@Service
public class BankService {

    @Autowired
    private UserLoginRepository userLoginRepository;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private AccountBalanceRepository balanceRepository;

    @Autowired
    private BankTransactionRepository transactionRepository;

    public boolean login(String username, String password) {
        return userLoginRepository.findByUsernameAndPassword(username, password).isPresent();
    }

    public void registerUser(UserLogin userLogin) {
        userLoginRepository.save(userLogin);
    }

    public void createCustomer(Customer customer) {
        customerRepository.save(customer);
        balanceRepository.save(new AccountBalance(customer.getCustomerId(), customer.getCustomerId(), 0.0));
    }

    public Customer viewCustomer(Long customerId) {
        return customerRepository.findById(customerId).orElse(null);
    }

    public AccountBalance viewBalance(Long customerId) {
        return balanceRepository.findByCustomerId(customerId);
    }

    public void deposit(Long customerId, Double amount) {
        AccountBalance balance = balanceRepository.findByCustomerId(customerId);
        balance.setBalance(balance.getBalance() + amount);
        balanceRepository.save(balance);
        transactionRepository.save(new BankTransaction(null, customerId, "DEPOSIT", amount, new Date()));
    }

    public void withdraw(Long customerId, Double amount) throws Exception {
        AccountBalance balance = balanceRepository.findByCustomerId(customerId);
        if (balance.getBalance() < amount) {
            throw new Exception("Insufficient balance");
        }
        balance.setBalance(balance.getBalance() - amount);
        balanceRepository.save(balance);
        transactionRepository.save(new BankTransaction(null, customerId, "WITHDRAW", amount, new Date()));
    }

    public List<BankTransaction> getTransactionHistory(Long customerId) {
        return transactionRepository.findByCustomerIdOrderByTransactionDateDesc(customerId);
    }
}
🌐 Controllers
✅ File: controller/BankController.java
java
Copy
Edit
package com.oracle.bankapp.controller;

import com.oracle.bankapp.model.*;
import com.oracle.bankapp.service.BankService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/bank")
public class BankController {

    @Autowired
    private BankService bankService;

    @PostMapping("/login")
    public String login(@RequestParam String username, @RequestParam String password) {
        boolean success = bankService.login(username, password);
        return success ? "Login successful" : "Invalid credentials";
    }

    @PostMapping("/register")
    public String registerUser(@RequestBody UserLogin userLogin) {
        bankService.registerUser(userLogin);
        return "User registered successfully";
    }

    @PostMapping("/createCustomer")
    public String createCustomer(@RequeBody Customer customer) {
        bankService.createCustomer(customer);
        return "Customer created successfully";
    }

    @GetMapping("/customer/{id}")
    public Customer viewCustomer(@PathVariable Long id) {
        return bankService.viewCustomer(id);
    }

    @GetMapping("/balance/{customerId}")
    public AccountBalance viewBalance(@PathVariable Long customerId) {
        return bankService.viewBalance(customerId);
    }

    @PostMapping("/deposit")
    public String deposit(@RequestParam Long customerId, @RequestParam Double amount) {
        bankService.deposit(customerId, amount);
        return "Amount deposited successfully";
    }

    @PostMapping("/withdraw")
    public String withdraw(@RequestParam Long customerId, @RequestParam Double amount) {
        try {
            bankService.withdraw(customerId, amount);
            return "Amount withdrawn successfully";
        } catch (Exception e) {
            return e.getMessage();
        }
    }

    @GetMapping("/transactions/{customerId}")
    public List<BankTransaction> transactionHistory(@PathVariable Long customerId) {
        return bankService.getTransactionHistory(customerId);
    }
}

pom.xml
