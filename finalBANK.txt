bank/
├── pom.xml
└── src/
    └── main/
        ├── java/
        │   └── com/
        │       └── intern/
        │           └── bank/
        │               ├── BankApplication.java
        │               ├── controller/
        │               │   ├── AccountController.java
        │               │   ├── AuthController.java
        │               │   └── LoginRequest.java
        │               ├── exception/
        │               │   └── CustomException.java
        │               ├── model/
        │               │   ├── Account.java
        │               │   ├── Customer.java
        │               │   ├── Transaction.java
        │               │   └── UserLogin.java
        │               ├── repository/
        │               │   ├── AccountRepository.java
        │               │   ├── CustomerRepository.java
        │               │   ├── TransactionRepository.java
        │               │   └── UserLoginRepository.java
        │               └── service/
        │                   ├── AccountService.java
        │                   ├── AuthService.java
        │                   └── TransactionService.java
        └── resources/
            └── application.properties








3. pom.xml
xml
Copy
Edit
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.intern.bank</groupId>
  <artifactId>bank</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.7.3</version>
  </parent>

  <properties>
    <java.version>11</java.version>
  </properties>

  <dependencies>
    <!-- Spring Web & JPA -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- Oracle JDBC Driver -->
    <dependency>
      <groupId>com.oracle.database.jdbc</groupId>
      <artifactId>ojdbc8</artifactId>
      <version>19.3.0.0</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Enable Spring Boot `mvn spring-boot:run` -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>
4. application.properties (src/main/resources)
properties
Copy
Edit
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE
spring.datasource.username=YOUR_DB_USERNAME
spring.datasource.password=YOUR_DB_PASSWORD
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
Replace YOUR_DB_USERNAME / YOUR_DB_PASSWORD.

5. Main Application
<details><summary><code>BankApplication.java</code></summary>
java
Copy
Edit
package com.intern.bank;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BankApplication {
    public static void main(String[] args) {
        SpringApplication.run(BankApplication.class, args);
    }
}
</details>
6. Exception
<details><summary><code>CustomException.java</code></summary>
java
Copy
Edit
package com.intern.bank.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(HttpStatus.BAD_REQUEST)
public class CustomException extends RuntimeException {
    public CustomException(String message) {
        super(message);
    }
}
</details>
7. Models (with getters & setters)
<details><summary><code>Customer.java</code></summary>
java
Copy
Edit
package com.intern.bank.model;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "INTERN_CUSTOMER")
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID")
    private Long id;

    @Column(name = "NAME")
    private String name;

    @Column(name = "EMAIL")
    private String email;

    @Column(name = "PHONE")
    private String phone;

    @Column(name = "ADDRESS")
    private String address;

    @Column(name = "DOB")
    private LocalDate dob;

    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public LocalDate getDob() { return dob; }
    public void setDob(LocalDate dob) { this.dob = dob; }
}
</details> <details><summary><code>Account.java</code></summary>
java
Copy
Edit
package com.intern.bank.model;

import javax.persistence.*;
import java.math.BigDecimal;

@Entity
@Table(name = "INTERN_ACCOUNT")
public class Account {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "CUSTOMER_ID", nullable = false)
    private Customer customer;

    @Column(name = "ACCOUNT_TYPE")
    private String accountType;

    @Column(name = "BALANCE")
    private BigDecimal balance;

    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public Customer getCustomer() { return customer; }
    public void setCustomer(Customer customer) { this.customer = customer; }

    public String getAccountType() { return accountType; }
    public void setAccountType(String accountType) { this.accountType = accountType; }

    public BigDecimal getBalance() { return balance; }
    public void setBalance(BigDecimal balance) { this.balance = balance; }
}
</details> <details><summary><code>Transaction.java</code></summary>
java
Copy
Edit
package com.intern.bank.model;

import javax.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "INTERN_BANK_TRANSACTION")
public class Transaction {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "ACCOUNT_ID", nullable = false)
    private Account account;

    @Column(name = "TRANSACTION_TYPE")
    private String transactionType;

    @Column(name = "AMOUNT")
    private BigDecimal amount;

    @Column(name = "TRANSACTION_DATE")
    private LocalDateTime transactionDate;

    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public Account getAccount() { return account; }
    public void setAccount(Account account) { this.account = account; }

    public String getTransactionType() { return transactionType; }
    public void setTransactionType(String transactionType) { this.transactionType = transactionType; }

    public BigDecimal getAmount() { return amount; }
    public void setAmount(BigDecimal amount) { this.amount = amount; }

    public LocalDateTime getTransactionDate() { return transactionDate; }
    public void setTransactionDate(LocalDateTime transactionDate) { this.transactionDate = transactionDate; }
}
</details> <details><summary><code>UserLogin.java</code></summary>
java
Copy
Edit
package com.intern.bank.model;

import javax.persistence.*;

@Entity
@Table(name = "INTERN_USER_LOGIN")
public class UserLogin {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID")
    private Long id;

    @Column(name = "USERNAME")
    private String username;

    @Column(name = "PASSWORD")
    private String password;

    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
}
</details>
8. Repositories
<details><summary><code>CustomerRepository.java</code></summary>
java
Copy
Edit
package com.intern.bank.repository;

import com.intern.bank.model.Customer;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CustomerRepository extends JpaRepository<Customer, Long> {
}
</details> <details><summary><code>AccountRepository.java</code></summary>
java
Copy
Edit
package com.intern.bank.repository;

import com.intern.bank.model.Account;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface AccountRepository extends JpaRepository<Account, Long> {
    List<Account> findByCustomerId(Long customerId);
}
</details> <details><summary><code>TransactionRepository.java</code></summary>
java
Copy
Edit
package com.intern.bank.repository;

import com.intern.bank.model.Transaction;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface TransactionRepository extends JpaRepository<Transaction, Long> {
    List<Transaction> findByAccountId(Long accountId);
}
</details> <details><summary><code>UserLoginRepository.java</code></summary>
java
Copy
Edit
package com.intern.bank.repository;

import com.intern.bank.model.UserLogin;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserLoginRepository extends JpaRepository<UserLogin, Long> {
    Optional<UserLogin> findByUsername(String username);
}
</details>
9. Services
<details><summary><code>AuthService.java</code></summary>
java
Copy
Edit
package com.intern.bank.service;

import com.intern.bank.controller.LoginRequest;
import com.intern.bank.exception.CustomException;
import com.intern.bank.model.UserLogin;
import com.intern.bank.repository.UserLoginRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class AuthService {
    @Autowired
    private UserLoginRepository userLoginRepository;

    public UserLogin register(UserLogin user) {
        userLoginRepository.findByUsername(user.getUsername())
            .ifPresent(u -> { throw new CustomException("Username already exists"); });
        return userLoginRepository.save(user);
    }

    public void login(LoginRequest req) {
        UserLogin user = userLoginRepository.findByUsername(req.getUsername())
            .orElseThrow(() -> new CustomException("User not found"));
        if (!user.getPassword().equals(req.getPassword())) {
            throw new CustomException("Invalid credentials");
        }
    }
}
</details> <details><summary><code>AccountService.java</code></summary>
java
Copy
Edit
package com.intern.bank.service;

import com.intern.bank.exception.CustomException;
import com.intern.bank.model.Account;
import com.intern.bank.model.Customer;
import com.intern.bank.repository.AccountRepository;
import com.intern.bank.repository.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class AccountService {
    @Autowired private CustomerRepository customerRepo;
    @Autowired private AccountRepository accountRepo;

    public Customer createCustomer(Customer c) {
        return customerRepo.save(c);
    }

    public Customer getCustomerById(Long id) {
        return customerRepo.findById(id)
            .orElseThrow(() -> new CustomException("Customer not found"));
    }

    public List<Customer> getAllCustomers() {
        return customerRepo.findAll();
    }

    public Account createAccount(Long customerId, Account acct) {
        Customer c = getCustomerById(customerId);
        acct.setCustomer(c);
        if (acct.getBalance() == null) {
            acct.setBalance(java.math.BigDecimal.ZERO);
        }
        return accountRepo.save(acct);
    }

    public Account getAccountById(Long id) {
        return accountRepo.findById(id)
            .orElseThrow(() -> new CustomException("Account not found"));
    }

    public List<Account> getAccountsByCustomer(Long customerId) {
        getCustomerById(customerId);
        return accountRepo.findByCustomerId(customerId);
    }
}
</details> <details><summary><code>TransactionService.java</code></summary>
java
Copy
Edit
package com.intern.bank.service;

import com.intern.bank.exception.CustomException;
import com.intern.bank.model.Account;
import com.intern.bank.model.Transaction;
import com.intern.bank.repository.AccountRepository;
import com.intern.bank.repository.TransactionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Service
public class TransactionService {
    @Autowired private AccountRepository accountRepo;
    @Autowired private TransactionRepository txRepo;

    @Transactional
    public Transaction deposit(Long accountId, BigDecimal amt) {
        Account acct = accountRepo.findById(accountId)
            .orElseThrow(() -> new CustomException("Account not found"));
        acct.setBalance(acct.getBalance().add(amt));
        accountRepo.save(acct);

        Transaction tx = new Transaction();
        tx.setAccount(acct);
        tx.setTransactionType("DEPOSIT");
        tx.setAmount(amt);
        tx.setTransactionDate(LocalDateTime.now());
        return txRepo.save(tx);
    }

    @Transactional
    public Transaction withdraw(Long accountId, BigDecimal amt) {
        Account acct = accountRepo.findById(accountId)
            .orElseThrow(() -> new CustomException("Account not found"));
        if (acct.getBalance().compareTo(amt) < 0) {
            throw new CustomException("Insufficient funds");
        }
        acct.setBalance(acct.getBalance().subtract(amt));
        accountRepo.save(acct);

        Transaction tx = new Transaction();
        tx.setAccount(acct);
        tx.setTransactionType("WITHDRAW");
        tx.setAmount(amt);
        tx.setTransactionDate(LocalDateTime.now());
        return txRepo.save(tx);
    }

    @Transactional
    public void transfer(Long fromAcctId, Long toAcctId, BigDecimal amt) {
        withdraw(fromAcctId, amt);
        deposit(toAcctId, amt);
    }

    public List<Transaction> getTransactions(Long accountId) {
        accountRepo.findById(accountId)
            .orElseThrow(() -> new CustomException("Account not found"));
        return txRepo.findByAccountId(accountId);
    }
}
</details>
10. Controllers
<details><summary><code>LoginRequest.java</code></summary>
java
Copy
Edit
package com.intern.bank.controller;

public class LoginRequest {
    private String username;
    private String password;

    public String getUsername() { return username; }
    public void setUsername(String u) { this.username = u; }

    public String getPassword() { return password; }
    public void setPassword(String p) { this.password = p; }
}
</details> <details><summary><code>AuthController.java</code></summary>
java
Copy
Edit
package com.intern.bank.controller;

import com.intern.bank.model.UserLogin;
import com.intern.bank.service.AuthService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
public class AuthController {
    @Autowired private AuthService authService;

    @PostMapping("/register")
    public ResponseEntity<UserLogin> register(@RequestBody UserLogin user) {
        return ResponseEntity.ok(authService.register(user));
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody LoginRequest req) {
        authService.login(req);
        return ResponseEntity.ok("Login successful");
    }
}
</details> <details><summary><code>AccountController.java</code></summary>
java
Copy
Edit
package com.intern.bank.controller;

import com.intern.bank.model.Account;
import com.intern.bank.model.Customer;
import com.intern.bank.model.Transaction;
import com.intern.bank.service.AccountService;
import com.intern.bank.service.TransactionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;

@RestController
@RequestMapping("/api")
public class AccountController {
    @Autowired private AccountService accountService;
    @Autowired private TransactionService txService;

    // Customer endpoints
    @PostMapping("/customers")
    public ResponseEntity<Customer> createCustomer(@RequestBody Customer c) {
        return ResponseEntity.ok(accountService.createCustomer(c));
    }

    @GetMapping("/customers/{id}")
    public ResponseEntity<Customer> getCustomer(@PathVariable Long id) {
        return ResponseEntity.ok(accountService.getCustomerById(id));
    }

    @GetMapping("/customers")
    public ResponseEntity<List<Customer>> getAllCustomers() {
        return ResponseEntity.ok(accountService.getAllCustomers());
    }

    // Account endpoints
    @PostMapping("/customers/{custId}/accounts")
    public ResponseEntity<Account> createAccount(@PathVariable Long custId,
                                                 @RequestBody Account a) {
        return ResponseEntity.ok(accountService.createAccount(custId, a));
    }

    @GetMapping("/accounts/{id}")
    public ResponseEntity<Account> getAccount(@PathVariable Long id) {
        return ResponseEntity.ok(accountService.getAccountById(id));
    }

    @GetMapping("/customers/{custId}/accounts")
    public ResponseEntity<List<Account>> getAccountsByCustomer(@PathVariable Long custId) {
        return ResponseEntity.ok(accountService.getAccountsByCustomer(custId));
    }

    // Transaction endpoints
    @PostMapping("/accounts/{id}/deposit")
    public ResponseEntity<Transaction> deposit(@PathVariable Long id,
                                               @RequestParam BigDecimal amount) {
        return ResponseEntity.ok(txService.deposit(id, amount));
    }

    @PostMapping("/accounts/{id}/withdraw")
    public ResponseEntity<Transaction> withdraw(@PathVariable Long id,
                                                @RequestParam BigDecimal amount) {
        return ResponseEntity.ok(txService.withdraw(id, amount));
    }

    @PostMapping("/accounts/transfer")
    public ResponseEntity<String> transfer(@RequestParam Long from,
                                           @RequestParam Long to,
                                           @RequestParam BigDecimal amount) {
        txService.transfer(from, to, amount);
        return ResponseEntity.ok("Transfer completed");
    }

    @GetMapping("/accounts/{id}/transactions")
    public ResponseEntity<List<Transaction>> getTransactions(@PathVariable Long id) {
        return ResponseEntity.ok(txService.getTransactions(id));
    }
}
</details>



Testing 

1. (Optional) Authentication
We’re not enforcing tokens, but you can still verify register/login work.

Register

Method: POST

URL: {{base_url}}/auth/register

Headers: Content-Type: application/json

Body (raw JSON):

json
Copy
Edit
{
  "username": "alice",
  "password": "secret123"
}
Login

Method: POST

URL: {{base_url}}/auth/login

Headers: Content-Type: application/json

Body: same as above

2. Customer Operations
2.1 Create Customer
Method: POST

URL: {{base_url}}/customers

Headers: Content-Type: application/json

Body:

json
Copy
Edit
{
  "name": "Alice Smith",
  "email": "alice@example.com",
  "phone": "555-1234",
  "address": "123 Main St",
  "dob": "1990-01-01"
}
What to do in Postman:

New request → POST → paste URL.

Under Body → select raw + JSON.

Paste JSON, Send.

In Tests tab you can pm.environment.set("customerId", pm.response.json().id); to capture the returned id.

2.2 Get Customer by ID
Method: GET

URL: {{base_url}}/customers/{{customerId}}

No body required.

2.3 List All Customers
Method: GET

URL: {{base_url}}/customers

3. Account Operations
3.1 Create Account for a Customer
Method: POST

URL: {{base_url}}/customers/{{customerId}}/accounts

Headers: Content-Type: application/json

Body:

json
Copy
Edit
{
  "accountType": "SAVINGS",
  "balance": 1000.00
}
In Postman: capture the returned accountId via a Tests script.

3.2 Get Account by ID
Method: GET

URL: {{base_url}}/accounts/{{accountId}}

3.3 List Accounts for a Customer
Method: GET

URL: {{base_url}}/customers/{{customerId}}/accounts

4. Transaction Operations
Deposit and withdraw use query parameters; transfer takes three query params; list uses path.

4.1 Deposit
Method: POST

URL: {{base_url}}/accounts/{{accountId}}/deposit?amount=250.00

4.2 Withdraw
Method: POST

URL: {{base_url}}/accounts/{{accountId}}/withdraw?amount=100.00

4.3 Transfer
Method: POST

URL: {{base_url}}/accounts/transfer?from={{accountId}}&to={{accountId2}}&amount=50.00

Prerequisite: you must have a second account ID stored in {{accountId2}}.

4.4 List Transactions for an Account
Method: GET

URL: {{base_url}}/accounts/{{accountId}}/transactions
