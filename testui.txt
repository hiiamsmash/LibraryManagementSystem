// File: src/app/app.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Banking App';
}

// File: src/app/app.component.html
<router-outlet></router-outlet>

// File: src/app/services/auth.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = 'http://localhost:8080/api/bank';

  constructor(private http: HttpClient) {}

  login(email: string, password: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/login`, { email, password });
  }

  register(name: string, email: string, password: string): Observable<any> {
    return this.http.post(`${this.apiUrl}/register`, { name, email, password });
  }

  logout(): void {
    localStorage.removeItem('token');
  }

  saveToken(token: string): void {
    localStorage.setItem('token', token);
  }

  getToken(): string | null {
    return localStorage.getItem('token');
  }

  isAuthenticated(): boolean {
    return !!this.getToken();
  }
}

// File: src/app/components/login/login.component.ts
import { Component } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html'
})
export class LoginComponent {
  email = '';
  password = '';
  error = '';

  constructor(private authService: AuthService, private router: Router) {}

  login() {
    this.authService.login(this.email, this.password).subscribe({
      next: (res) => {
        this.authService.saveToken(res.token);
        this.router.navigate(['/dashboard']);
      },
      error: () => this.error = 'Invalid credentials'
    });
  }
}

// File: src/app/components/login/login.component.html
<div class="container">
  <h2>Login</h2>
  <form (ngSubmit)="login()">
    <input type="email" [(ngModel)]="email" name="email" placeholder="Email" required>
    <input type="password" [(ngModel)]="password" name="password" placeholder="Password" required>
    <button type="submit">Login</button>
  </form>
  <p class="error">{{ error }}</p>
</div>

// File: src/app/components/register/register.component.ts
import { Component } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html'
})
export class RegisterComponent {
  name = '';
  email = '';
  password = '';

  constructor(private authService: AuthService, private router: Router) {}

  register() {
    this.authService.register(this.name, this.email, this.password).subscribe(() => {
      this.router.navigate(['/login']);
    });
  }
}

// File: src/app/components/register/register.component.html
<div class="container">
  <h2>Register</h2>
  <form (ngSubmit)="register()">
    <input type="text" [(ngModel)]="name" name="name" placeholder="Name" required>
    <input type="email" [(ngModel)]="email" name="email" placeholder="Email" required>
    <input type="password" [(ngModel)]="password" name="password" placeholder="Password" required>
    <button type="submit">Register</button>
  </form>
</div>

// File: src/app/app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './components/login/login.component';
import { RegisterComponent } from './components/register/register.component';

const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { path: '', redirectTo: '/login', pathMatch: 'full' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}

// File: src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { LoginComponent } from './components/login/login.component';
import { RegisterComponent } from './components/register/register.component';
import { AppRoutingModule } from './app-routing.module';

@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    RegisterComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    HttpClientModule,
    AppRoutingModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}













/////////////////////////////////////////



Perfect! Now you are building it step by step like a real app ‚Äî excellent.

You now want this flow:

üëâ Login successful ‚Üí go to /dashboard ‚Üí show:

‚úÖ Button / Link: "Create Customer"
‚úÖ Form: takes:

loginId

name

email

phone

address

dob

‚úÖ Submits form to:
POST http://localhost:8080/api/bank/customers

Step-by-step plan:
1Ô∏è‚É£ Add /dashboard route
üëâ In app.routes.ts:

ts
Copy
Edit
import { DashboardComponent } from './dashboard/dashboard.component';

export const routes: Routes = [
  { path: '', redirectTo: '/login', pathMatch: 'full' },
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { path: 'dashboard', component: DashboardComponent }, // ‚úÖ new
];
2Ô∏è‚É£ Create DashboardComponent
üëâ Generate component:

bash
Copy
Edit
ng generate component dashboard --standalone
üëâ OR manually create:

ts
Copy
Edit
import { Component } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [FormsModule, RouterLink],
  templateUrl: './dashboard.component.html'
})
export class DashboardComponent {
  loginId: number | null = null;
  name = '';
  email = '';
  phone = '';
  address = '';
  dob = '';
  responseMessage = '';

  constructor(private bankService: BankService) {}

  createCustomer() {
    this.bankService.createCustomer(
      this.loginId!,
      this.name,
      this.email,
      this.phone,
      this.address,
      this.dob
    ).subscribe(
      (res) => {
        console.log('Success:', res);
        this.responseMessage = res;
      },
      (error) => {
        console.error('Error:', error);
        this.responseMessage = 'Customer creation failed!';
      }
    );
  }
}
3Ô∏è‚É£ dashboard.component.html
html
Copy
Edit
<h2>Dashboard - Create Customer</h2>

<form (ngSubmit)="createCustomer()">
  <input type="number" placeholder="Login ID" [(ngModel)]="loginId" name="loginId" required />
  <input type="text" placeholder="Name" [(ngModel)]="name" name="name" required />
  <input type="email" placeholder="Email" [(ngModel)]="email" name="email" required />
  <input type="text" placeholder="Phone" [(ngModel)]="phone" name="phone" />
  <input type="text" placeholder="Address" [(ngModel)]="address" name="address" />
  <input type="date" placeholder="DOB" [(ngModel)]="dob" name="dob" />

  <button type="submit">Create Customer</button>
</form>

<p *ngIf="responseMessage">{{ responseMessage }}</p>
4Ô∏è‚É£ Update bank.service.ts
üëâ Add this method:

ts
Copy
Edit
createCustomer(loginId: number, name: string, email: string, phone: string, address: string, dob: string): Observable<any> {
  const body = new URLSearchParams();
  body.set('loginId', loginId.toString());
  body.set('name', name);
  body.set('email', email);
  body.set('phone', phone);
  body.set('address', address);
  body.set('dob', dob);

  return this.http.post(`${this.baseUrl}/customers`, body.toString(), {
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    responseType: 'text' as 'json'
  });
}
5Ô∏è‚É£ Redirect after login
üëâ In login.component.ts, after successful login, navigate to /dashboard:

ts
Copy
Edit
onLogin() {
  this.bankService.login(this.username, this.password).subscribe(
    (res) => {
      console.log('Success:', res);
      this.responseMessage = res;

      if (res.includes('Login successful')) {
        this.router.navigate(['/dashboard']); // ‚úÖ redirect to dashboard
      }
    },
    (error) => {
      console.error('Error:', error);
      if (error.status === 401) {
        this.responseMessage = 'Invalid username or password!';
      } else {
        this.responseMessage = 'Login failed!';
      }
    }
  );
}

