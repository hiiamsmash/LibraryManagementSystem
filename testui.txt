Perfect! Since you already have your **Spring Boot backend ready**, I will focus **only on the Angular side** for your requirement:

‚úÖ Angular v18 project
‚úÖ Simple Register + Login forms
‚úÖ Send form data as `application/x-www-form-urlencoded` (since your backend expects `@RequestParam`)
‚úÖ Display response message on UI

---

### 1Ô∏è‚É£ Setup Angular Project (if not done already)

```bash
ng new bank-frontend --routing=true --style=css
cd bank-frontend
ng add @angular/material    # optional if you want nice UI
```

---

### 2Ô∏è‚É£ Generate Components and Service

```bash
ng generate component register
ng generate component login
ng generate service bank
```

---

### 3Ô∏è‚É£ `bank.service.ts`

üëâ This is the service that calls your backend

```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class BankService {

  private baseUrl = 'http://localhost:8080/api/bank';

  constructor(private http: HttpClient) {}

  register(username: string, password: string): Observable<any> {
    const body = new URLSearchParams();
    body.set('username', username);
    body.set('password', password);

    return this.http.post(`${this.baseUrl}/register`, body.toString(), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
    });
  }

  login(username: string, password: string): Observable<any> {
    const body = new URLSearchParams();
    body.set('username', username);
    body.set('password', password);

    return this.http.post(`${this.baseUrl}/login`, body.toString(), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
    });
  }
}
```

---

### 4Ô∏è‚É£ RegisterComponent

#### `register.component.html`

```html
<h2>Register</h2>
<form (ngSubmit)="onRegister()">
  <input type="text" placeholder="Username" [(ngModel)]="username" name="username" required />
  <input type="password" placeholder="Password" [(ngModel)]="password" name="password" required />
  <button type="submit">Register</button>
</form>

<p *ngIf="responseMessage">{{ responseMessage }}</p>
```

#### `register.component.ts`

```typescript
import { Component } from '@angular/core';
import { BankService } from '../bank.service';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html'
})
export class RegisterComponent {

  username = '';
  password = '';
  responseMessage = '';

  constructor(private bankService: BankService) {}

  onRegister() {
    this.bankService.register(this.username, this.password).subscribe(
      response => {
        this.responseMessage = response.message;
      },
      error => {
        this.responseMessage = 'Error registering user.';
      }
    );
  }
}
```

---

### 5Ô∏è‚É£ LoginComponent

#### `login.component.html`

```html
<h2>Login</h2>
<form (ngSubmit)="onLogin()">
  <input type="text" placeholder="Username" [(ngModel)]="username" name="username" required />
  <input type="password" placeholder="Password" [(ngModel)]="password" name="password" required />
  <button type="submit">Login</button>
</form>

<p *ngIf="responseMessage">{{ responseMessage }}</p>
```

#### `login.component.ts`

```typescript
import { Component } from '@angular/core';
import { BankService } from '../bank.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html'
})
export class LoginComponent {

  username = '';
  password = '';
  responseMessage = '';

  constructor(private bankService: BankService) {}

  onLogin() {
    this.bankService.login(this.username, this.password).subscribe(
      response => {
        this.responseMessage = response.message;
      },
      error => {
        this.responseMessage = 'Error logging in.';
      }
    );
  }
}
```

---

### 6Ô∏è‚É£ AppRouting

#### `app-routing.module.ts`

```typescript
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { RegisterComponent } from './register/register.component';
import { LoginComponent } from './login/login.component';

const routes: Routes = [
  { path: 'register', component: RegisterComponent },
  { path: 'login', component: LoginComponent },
  { path: '', redirectTo: '/login', pathMatch: 'full' } // default to login page
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}
```

---

### 7Ô∏è‚É£ AppModule

‚úÖ Don't forget to import `HttpClientModule` and `FormsModule`:

```typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { RegisterComponent } from './register/register.component';
import { LoginComponent } from './login/login.component';
import { HttpClientModule } from '@angular/common/http';
import { FormsModule } from '@angular/forms';

@NgModule({
  declarations: [
    AppComponent,
    RegisterComponent,
    LoginComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

---

### 8Ô∏è‚É£ Running the App

1. Run your **Spring Boot backend** on port `8080`
2. Run Angular:

```bash
ng serve --open
```

Now visit:

‚úÖ [http://localhost:4200/register](http://localhost:4200/register) ‚Üí Register page
‚úÖ [http://localhost:4200/login](http://localhost:4200/login) ‚Üí Login page

---

### Summary:

‚úÖ You have Register + Login form in Angular
‚úÖ It sends username/password as `x-www-form-urlencoded` (correct for your backend `@RequestParam`)
‚úÖ Displays response in UI

---

If you want:

‚úÖ I can generate this **entire Angular project ZIP file** ‚Üí you can directly open & run (ready-made)
‚úÖ I can also show how to **save token / session** after login for next steps (if needed)

---

Do you want me to give you the **full working Angular project zip** also? (Just say *yes* if you want it.)
Then you can just `ng serve` and test in 1 minute üöÄ.
